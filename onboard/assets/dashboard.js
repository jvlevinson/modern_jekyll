/**
 * Onboard Dashboard JavaScript
 * Configuration viewer with security validation
 * Phase 6: Advanced Features
 */

(function() {
  'use strict';

  // Site configuration (loaded from _config.yml)
  let siteConfig = null;

  // Color palette definitions (from _data/color-palettes.yml)
  const colorPalettes = {
    orange: {
      50: '#fff7ed', 100: '#ffedd5', 200: '#fed7aa', 300: '#fdba74',
      400: '#fb923c', 500: '#f97316', 600: '#ea580c', 700: '#c2410c',
      800: '#9a3412', 900: '#7c2d12'
    },
    blue: {
      50: '#eff6ff', 100: '#dbeafe', 200: '#bfdbfe', 300: '#93c5fd',
      400: '#60a5fa', 500: '#3b82f6', 600: '#2563eb', 700: '#1d4ed8',
      800: '#1e40af', 900: '#1e3a8a'
    },
    green: {
      50: '#f0fdf4', 100: '#dcfce7', 200: '#bbf7d0', 300: '#86efac',
      400: '#4ade80', 500: '#22c55e', 600: '#16a34a', 700: '#15803d',
      800: '#166534', 900: '#14532d'
    },
    purple: {
      50: '#faf5ff', 100: '#f3e8ff', 200: '#e9d5ff', 300: '#d8b4fe',
      400: '#c084fc', 500: '#a855f7', 600: '#9333ea', 700: '#7e22ce',
      800: '#6b21a8', 900: '#581c87'
    },
    red: {
      50: '#fef2f2', 100: '#fee2e2', 200: '#fecaca', 300: '#fca5a5',
      400: '#f87171', 500: '#ef4444', 600: '#dc2626', 700: '#b91c1c',
      800: '#991b1b', 900: '#7f1d1d'
    }
  };

  /**
   * Initialize dashboard
   */
  async function init() {
    // Security check: Only allow localhost
    if (!isLocalhost()) {
      showAccessDenied();
      return;
    }

    // Load configuration
    await loadConfig();

    // Render all sections
    renderThemeSection();
    renderContentSection();
    renderStructureSection();

    // Setup navigation
    setupNavigation();

    // Setup preview controls
    setupPreviewControls();

    console.log('✅ Dashboard initialized successfully');
  }

  /**
   * Check if running on localhost
   */
  function isLocalhost() {
    const hostname = window.location.hostname;
    const allowed = ['localhost', '127.0.0.1', '0.0.0.0', ''];
    return allowed.includes(hostname);
  }

  /**
   * Show access denied message
   */
  function showAccessDenied() {
    document.body.innerHTML = `
      <div style="display: flex; align-items: center; justify-content: center; min-height: 100vh; padding: 2rem; text-align: center; background: #f8fafc;">
        <div style="max-width: 500px; background: white; padding: 3rem; border-radius: 1rem; box-shadow: 0 10px 25px rgba(0,0,0,0.1);">
          <div style="font-size: 4rem; margin-bottom: 1rem;">⚠️</div>
          <h1 style="font-size: 2rem; margin-bottom: 1rem; color: #0f172a;">Access Denied</h1>
          <p style="color: #64748b; font-size: 1.125rem; line-height: 1.6;">
            This dashboard only works on localhost for security reasons.
          </p>
          <p style="margin-top: 1rem; padding: 1rem; background: #fef2f2; border-left: 4px solid #ef4444; text-align: left; font-size: 0.875rem; color: #991b1b; border-radius: 0.375rem;">
            <strong>Security Note:</strong> The onboard dashboard is restricted to local development environments to prevent unauthorized configuration access.
          </p>
        </div>
      </div>
    `;
  }

  /**
   * Load site configuration
   * Note: In Phase 1, we'll use hardcoded config matching _config.yml
   * In Phase 2, this could fetch from a Jekyll data endpoint
   */
  async function loadConfig() {
    try {
      // Hardcoded configuration (matches current _config.yml)
      // In a real implementation, this could be generated by Jekyll as JSON
      siteConfig = {
        title: 'William M. Orr - Professional Portfolio',
        author: 'William M. Orr',
        theme: {
          brand_primary: 'blue',
          brand_secondary: 'green',
          neutral: 'slate',
          mode: 'light'
        },
        hero: {
          heading: 'IT Leadership Portfolio',
          description: 'Skilled IT leader with 12+ years managing Cisco networks, VoIP systems, and enterprise infrastructure. Proven track record in network design, deployment, and optimization.'
        },
        services: {
          list: [
            { title: 'IT Strategy & Leadership' },
            { title: 'Network & VoIP Standardization' },
            { title: 'Systems Architecture & Design' },
            { title: 'Process Automation & Innovation' }
          ]
        },
        portfolio_items: [
          { name: 'Network Modernization' },
          { name: 'VoIP Implementation' },
          { name: 'Security Enhancement' },
          { name: 'Cloud Migration' },
          { name: 'Process Automation' },
          { name: 'Team Development' }
        ],
        social: {
          twitter: 'williammorr',
          github: 'jvlevinson',
          linkedin: 'williammorr'
        }
      };

      console.log('✅ Configuration loaded');
    } catch (error) {
      console.error('❌ Failed to load configuration:', error);
      siteConfig = {
        theme: { brand_primary: 'blue', brand_secondary: null, neutral: 'slate', mode: 'light' },
        services: { list: [] },
        portfolio_items: []
      };
    }
  }

  /**
   * Render theme section
   */
  function renderThemeSection() {
    const { brand_primary, brand_secondary, neutral, mode } = siteConfig.theme;

    // Primary color
    const primaryColor = colorPalettes[brand_primary]?.[500] || '#3b82f6';
    const primarySwatch = document.querySelector('#current-primary .color-swatch');
    const primaryName = document.querySelector('#current-primary .color-name');
    const primaryHex = document.querySelector('#current-primary .color-hex');

    if (primarySwatch && primaryName && primaryHex) {
      primarySwatch.style.backgroundColor = primaryColor;
      primaryName.textContent = capitalize(brand_primary);
      primaryHex.textContent = primaryColor.toUpperCase();
    }

    // Secondary color
    if (brand_secondary) {
      const secondaryColor = colorPalettes[brand_secondary]?.[500] || '#22c55e';
      const secondarySwatch = document.querySelector('#current-secondary .color-swatch');
      const secondaryName = document.querySelector('#current-secondary .color-name');
      const secondaryHex = document.querySelector('#current-secondary .color-hex');

      if (secondarySwatch && secondaryName && secondaryHex) {
        secondarySwatch.style.backgroundColor = secondaryColor;
        secondaryName.textContent = capitalize(brand_secondary);
        secondaryHex.textContent = secondaryColor.toUpperCase();
      }
    } else {
      const secondaryName = document.querySelector('#current-secondary .color-name');
      const secondaryHex = document.querySelector('#current-secondary .color-hex');
      if (secondaryName) secondaryName.textContent = 'None';
      if (secondaryHex) secondaryHex.textContent = 'Not set';
    }

    // Neutral and mode
    const neutralEl = document.querySelector('#current-neutral .value-text');
    const modeEl = document.querySelector('#current-mode .value-text');

    if (neutralEl) neutralEl.textContent = capitalize(neutral);
    if (modeEl) modeEl.textContent = capitalize(mode);

    // Render palette shades
    renderPaletteShades(brand_primary);

    // Update stats
    updateThemeStats();
  }

  /**
   * Render palette color shades
   */
  function renderPaletteShades(paletteName) {
    const paletteDisplay = document.getElementById('palette-display');
    const paletteTitle = document.getElementById('palette-title');

    if (!paletteDisplay) return;

    const palette = colorPalettes[paletteName];
    if (!palette) {
      paletteDisplay.innerHTML = '<div class="palette-loading">Palette not found</div>';
      return;
    }

    if (paletteTitle) {
      paletteTitle.textContent = capitalize(paletteName);
    }

    paletteDisplay.innerHTML = '';

    Object.entries(palette).forEach(([shade, hex]) => {
      const shadeEl = document.createElement('div');
      shadeEl.className = 'palette-shade';
      shadeEl.style.backgroundColor = hex;
      shadeEl.textContent = shade;
      shadeEl.title = `${paletteName}-${shade}: ${hex}`;
      paletteDisplay.appendChild(shadeEl);
    });
  }

  /**
   * Update theme statistics
   */
  function updateThemeStats() {
    const componentsEl = document.getElementById('stat-components');
    const tokensEl = document.getElementById('stat-tokens');
    const colorsEl = document.getElementById('stat-colors');

    if (componentsEl) componentsEl.textContent = '8';
    if (tokensEl) tokensEl.textContent = '60+';

    const primaryShades = Object.keys(colorPalettes[siteConfig.theme.brand_primary] || {}).length;
    const secondaryShades = siteConfig.theme.brand_secondary ?
      Object.keys(colorPalettes[siteConfig.theme.brand_secondary] || {}).length : 0;

    if (colorsEl) colorsEl.textContent = primaryShades + secondaryShades;
  }

  /**
   * Render content section
   */
  function renderContentSection() {
    // Site info
    const titleEl = document.getElementById('site-title');
    const authorEl = document.getElementById('site-author');
    if (titleEl) titleEl.textContent = siteConfig.title || 'Not set';
    if (authorEl) authorEl.textContent = siteConfig.author || 'Not set';

    // Hero
    const heroHeadingEl = document.getElementById('hero-heading');
    const heroDescEl = document.getElementById('hero-description');
    if (heroHeadingEl) heroHeadingEl.textContent = siteConfig.hero?.heading || 'Not set';
    if (heroDescEl) heroDescEl.textContent = siteConfig.hero?.description || 'Not set';

    // Content stats
    const servicesCountEl = document.getElementById('services-count');
    const portfolioCountEl = document.getElementById('portfolio-count');
    const socialCountEl = document.getElementById('social-count');

    if (servicesCountEl) {
      servicesCountEl.textContent = siteConfig.services?.list?.length || 0;
    }
    if (portfolioCountEl) {
      portfolioCountEl.textContent = siteConfig.portfolio_items?.length || 0;
    }
    if (socialCountEl) {
      const socialLinks = Object.keys(siteConfig.social || {}).filter(key => siteConfig.social[key]);
      socialCountEl.textContent = socialLinks.length;
    }
  }

  /**
   * Render structure section
   */
  function renderStructureSection() {
    // Structure section is mostly static HTML
    // Could add dynamic project stats here in future
    console.log('✅ Structure section rendered');
  }

  /**
   * Setup navigation between sections
   */
  function setupNavigation() {
    const navItems = document.querySelectorAll('.dashboard__nav-item');
    const sections = document.querySelectorAll('.dashboard__section');

    navItems.forEach(item => {
      item.addEventListener('click', () => {
        const sectionId = item.dataset.section;

        // Update active nav item
        navItems.forEach(nav => nav.classList.remove('dashboard__nav-item--active'));
        item.classList.add('dashboard__nav-item--active');

        // Show selected section
        sections.forEach(section => section.hidden = true);
        const targetSection = document.getElementById(`section-${sectionId}`);
        if (targetSection) {
          targetSection.hidden = false;
        }
      });
    });
  }

  /**
   * Setup preview controls
   */
  function setupPreviewControls() {
    const refreshBtn = document.getElementById('refresh-preview');
    const viewportSelect = document.getElementById('preview-viewport');
    const iframe = document.getElementById('site-preview');

    if (refreshBtn && iframe) {
      refreshBtn.addEventListener('click', () => {
        iframe.src = iframe.src;
        console.log('🔄 Preview refreshed');
      });
    }

    if (viewportSelect && iframe) {
      viewportSelect.addEventListener('change', (e) => {
        const widths = {
          desktop: '100%',
          tablet: '768px',
          mobile: '375px'
        };

        const width = widths[e.target.value] || '100%';
        iframe.style.width = width;

        if (width !== '100%') {
          iframe.style.margin = '0 auto';
          iframe.style.display = 'block';
        }

        console.log(`📱 Viewport changed to: ${e.target.value}`);
      });
    }
  }

  /**
   * Utility: Capitalize string
   */
  function capitalize(str) {
    if (!str) return '';
    return str.charAt(0).toUpperCase() + str.slice(1);
  }

  /**
   * Initialize when DOM is ready
   */
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  // Export for debugging
  window.onboardDashboard = {
    config: () => siteConfig,
    reload: init,
    version: 'Phase 6.1.0'
  };

})();
