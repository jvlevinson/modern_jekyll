[{"filePath":"/home/groot/Github/modern_jekyll/js/creative.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/js/wow.min.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/assets/dashboard.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/components/color-card.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/components/color-gradient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/components/color-harmonies.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/components/color-picker.ts","messages":[{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":354,"column":42,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":354,"endColumn":55},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":372,"column":47,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":372,"endColumn":60}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * Color Picker Component\n * =============================================================================\n * Functional OKLCH color picker with live preview\n * Pure functions that manipulate DOM (no Web Components)\n * =============================================================================\n */\n\nimport type { OklchColor } from '../types/color.types.js';\nimport { toCssColor } from '../utils/color-convert.js';\nimport { generatePalette } from '../utils/palette-generator.js';\nimport { checkContrast } from '../utils/contrast-checker.js';\nimport { EventName } from '../types/events.types.js';\nimport { emit } from '../core/event-bus.js';\nimport { createColorSelector2DHTML, initColorSelector2D, updateSelector2DLightness } from './color-selector-2d.js';\nimport { oklchToHex, hexToOklch, isValidHex } from '../utils/hex-converter.js';\n\n/**\n * Color picker state\n */\ninterface ColorPickerState {\n  color: OklchColor;\n  previousColor: OklchColor;\n  key: 'brand_primary' | 'brand_secondary';\n}\n\n/**\n * Create color picker HTML structure\n *\n * @param id - Unique picker ID\n * @param label - Picker label text\n * @param initialColor - Initial OKLCH color\n * @returns HTML string\n *\n * @example\n * const html = createColorPickerHTML('primary-picker', 'Primary Color', { l: 60, c: 0.18, h: 262 });\n * container.innerHTML = html;\n */\nexport function createColorPickerHTML(\n  id: string,\n  label: string,\n  initialColor: OklchColor\n): string {\n  const cssColor = toCssColor(initialColor);\n  const hexColor = oklchToHex(initialColor);\n\n  return `\n    <div class=\"color-picker\" id=\"${id}\" data-picker>\n      <label class=\"color-picker__label\">\n        ${label}\n        <div class=\"color-picker__preview\" data-preview style=\"background-color: ${cssColor}\"></div>\n      </label>\n\n      <!-- 2D Color Selector -->\n      <div class=\"color-picker__visual\">\n        ${createColorSelector2DHTML(`${id}-selector`, initialColor.l)}\n      </div>\n\n      <!-- Hex Input -->\n      <div class=\"color-picker__hex\">\n        <label for=\"${id}-hex\">\n          Hex Color\n        </label>\n        <div class=\"color-picker__hex-input\">\n          <input\n            type=\"text\"\n            id=\"${id}-hex\"\n            data-hex-input\n            value=\"${hexColor}\"\n            pattern=\"^#?([0-9A-Fa-f]{3}|[0-9A-Fa-f]{6})$\"\n            placeholder=\"#000000\"\n            maxlength=\"7\"\n            aria-label=\"Hex color code\"\n          />\n          <button\n            type=\"button\"\n            class=\"color-picker__hex-copy\"\n            data-hex-copy\n            title=\"Copy hex code\"\n          >\n            📋\n          </button>\n        </div>\n      </div>\n\n      <div class=\"color-picker__controls\">\n        <!-- Lightness slider (0-100) -->\n        <div class=\"color-picker__control\">\n          <label for=\"${id}-lightness\">\n            Lightness: <span data-lightness-value>${initialColor.l}%</span>\n          </label>\n          <input\n            type=\"range\"\n            id=\"${id}-lightness\"\n            data-lightness\n            min=\"0\"\n            max=\"100\"\n            step=\"1\"\n            value=\"${initialColor.l}\"\n            aria-label=\"Lightness\"\n          />\n        </div>\n\n        <!-- Chroma slider (0-0.4) -->\n        <div class=\"color-picker__control\">\n          <label for=\"${id}-chroma\">\n            Chroma: <span data-chroma-value>${initialColor.c}</span>\n          </label>\n          <input\n            type=\"range\"\n            id=\"${id}-chroma\"\n            data-chroma\n            min=\"0\"\n            max=\"0.4\"\n            step=\"0.01\"\n            value=\"${initialColor.c}\"\n            aria-label=\"Chroma (saturation)\"\n          />\n        </div>\n\n        <!-- Hue slider (0-360) -->\n        <div class=\"color-picker__control\">\n          <label for=\"${id}-hue\">\n            Hue: <span data-hue-value>${initialColor.h}°</span>\n          </label>\n          <input\n            type=\"range\"\n            id=\"${id}-hue\"\n            data-hue\n            min=\"0\"\n            max=\"360\"\n            step=\"1\"\n            value=\"${initialColor.h}\"\n            aria-label=\"Hue\"\n          />\n        </div>\n      </div>\n\n      <div class=\"color-picker__info\">\n        <div class=\"color-picker__css\" data-css-value>\n          ${cssColor}\n        </div>\n        <div class=\"color-picker__contrast\" data-contrast>\n          <span data-contrast-ratio>—</span>\n          <span data-wcag-badge></span>\n        </div>\n      </div>\n\n      <div class=\"color-picker__palette\" data-palette></div>\n    </div>\n  `;\n}\n\n/**\n * Initialize color picker functionality\n *\n * @param element - Color picker container element\n * @param initialColor - Initial OKLCH color\n * @param key - Config key ('brand_primary' or 'brand_secondary')\n * @param onChange - Optional change callback\n * @returns Cleanup function\n *\n * @example\n * const container = document.getElementById('primary-picker');\n * const cleanup = initColorPicker(container, { l: 60, c: 0.18, h: 262 }, 'brand_primary');\n */\nexport function initColorPicker(\n  element: HTMLElement,\n  initialColor: OklchColor,\n  key: 'brand_primary' | 'brand_secondary',\n  onChange?: (color: OklchColor) => void\n): () => void {\n  const state: ColorPickerState = {\n    color: { ...initialColor },\n    previousColor: { ...initialColor },\n    key\n  };\n\n  // Get elements\n  const lightnessInput = element.querySelector('[data-lightness]') as HTMLInputElement;\n  const chromaInput = element.querySelector('[data-chroma]') as HTMLInputElement;\n  const hueInput = element.querySelector('[data-hue]') as HTMLInputElement;\n  const previewEl = element.querySelector('[data-preview]') as HTMLElement;\n  const cssValueEl = element.querySelector('[data-css-value]') as HTMLElement;\n  const paletteEl = element.querySelector('[data-palette]') as HTMLElement;\n  const hexInput = element.querySelector('[data-hex-input]') as HTMLInputElement;\n  const hexCopyBtn = element.querySelector('[data-hex-copy]') as HTMLButtonElement;\n  const selectorContainer = element.querySelector('[data-selector-2d]') as HTMLElement;\n\n  if (!lightnessInput || !chromaInput || !hueInput || !previewEl || !cssValueEl) {\n    console.error('Color picker: missing required elements');\n    return () => {};\n  }\n\n  // Initialize 2D color selector\n  let selector2DCleanup: (() => void) | null = null;\n  if (selectorContainer) {\n    selector2DCleanup = initColorSelector2D(\n      selectorContainer,\n      initialColor,\n      (color: OklchColor) => {\n        // Update state from 2D selector (keeps current lightness)\n        state.color = { ...color, l: state.color.l };\n        updateUI();\n        emitChangeEvent();\n        onChange?.(state.color);\n      }\n    );\n  }\n\n  // Update UI from state\n  const updateUI = () => {\n    const { l, c, h } = state.color;\n    const cssColor = toCssColor(state.color);\n    const hexColor = oklchToHex(state.color);\n\n    // Update sliders\n    lightnessInput.value = String(l);\n    chromaInput.value = String(c);\n    hueInput.value = String(h);\n\n    // Update value displays\n    const lightnessValue = element.querySelector('[data-lightness-value]');\n    const chromaValue = element.querySelector('[data-chroma-value]');\n    const hueValue = element.querySelector('[data-hue-value]');\n\n    if (lightnessValue) lightnessValue.textContent = `${l}%`;\n    if (chromaValue) chromaValue.textContent = String(c);\n    if (hueValue) hueValue.textContent = `${h}°`;\n\n    // Update hex input\n    if (hexInput && hexInput !== document.activeElement) {\n      hexInput.value = hexColor;\n    }\n\n    // Update preview\n    previewEl.style.backgroundColor = cssColor;\n\n    // Update CSS value\n    cssValueEl.textContent = cssColor;\n\n    // Update palette preview\n    if (paletteEl) {\n      updatePalettePreview(paletteEl, state.color);\n    }\n\n    // Update contrast info\n    updateContrastInfo(element, state.color);\n  };\n\n  // Handle slider changes\n  const handleLightnessChange = () => {\n    state.color.l = parseFloat(lightnessInput.value);\n\n    // Update 2D selector when lightness changes\n    if (selectorContainer) {\n      updateSelector2DLightness(selectorContainer, state.color.l);\n    }\n\n    updateUI();\n    emitChangeEvent();\n    onChange?.(state.color);\n  };\n\n  const handleChromaChange = () => {\n    state.color.c = parseFloat(chromaInput.value);\n    updateUI();\n    emitChangeEvent();\n    onChange?.(state.color);\n  };\n\n  const handleHueChange = () => {\n    state.color.h = parseFloat(hueInput.value);\n    updateUI();\n    emitChangeEvent();\n    onChange?.(state.color);\n  };\n\n  // Handle hex input change\n  const handleHexChange = () => {\n    if (!hexInput) return;\n\n    const hex = hexInput.value.trim();\n\n    if (isValidHex(hex)) {\n      const oklch = hexToOklch(hex);\n\n      if (oklch) {\n        state.color = oklch;\n        updateUI();\n        emitChangeEvent();\n        onChange?.(state.color);\n\n        // Update 2D selector\n        if (selectorContainer) {\n          updateSelector2DLightness(selectorContainer, oklch.l);\n        }\n\n        // Remove error styling\n        hexInput.classList.remove('color-picker__hex-input--error');\n      }\n    } else {\n      // Add error styling\n      hexInput.classList.add('color-picker__hex-input--error');\n    }\n  };\n\n  // Handle hex copy\n  const handleHexCopy = async () => {\n    if (!hexInput) return;\n\n    try {\n      await navigator.clipboard.writeText(hexInput.value);\n\n      // Show feedback\n      if (hexCopyBtn) {\n        const originalText = hexCopyBtn.textContent;\n        hexCopyBtn.textContent = '✓';\n        hexCopyBtn.classList.add('color-picker__hex-copy--copied');\n\n        setTimeout(() => {\n          hexCopyBtn.textContent = originalText;\n          hexCopyBtn.classList.remove('color-picker__hex-copy--copied');\n        }, 1500);\n      }\n    } catch (err) {\n      console.error('Failed to copy hex code:', err);\n    }\n  };\n\n  // Emit color change event\n  const emitChangeEvent = () => {\n    emit(EventName.COLOR_CHANGE, {\n      color: { ...state.color },\n      previousColor: { ...state.previousColor },\n      key: state.key\n    });\n\n    state.previousColor = { ...state.color };\n  };\n\n  // Attach listeners\n  lightnessInput.addEventListener('input', handleLightnessChange);\n  chromaInput.addEventListener('input', handleChromaChange);\n  hueInput.addEventListener('input', handleHueChange);\n\n  if (hexInput) {\n    hexInput.addEventListener('change', handleHexChange);\n    hexInput.addEventListener('blur', handleHexChange);\n  }\n\n  if (hexCopyBtn) {\n    hexCopyBtn.addEventListener('click', handleHexCopy);\n  }\n\n  // Initial UI update\n  updateUI();\n\n  // Cleanup function\n  return () => {\n    lightnessInput.removeEventListener('input', handleLightnessChange);\n    chromaInput.removeEventListener('input', handleChromaChange);\n    hueInput.removeEventListener('input', handleHueChange);\n\n    if (hexInput) {\n      hexInput.removeEventListener('change', handleHexChange);\n      hexInput.removeEventListener('blur', handleHexChange);\n    }\n\n    if (hexCopyBtn) {\n      hexCopyBtn.removeEventListener('click', handleHexCopy);\n    }\n\n    if (selector2DCleanup) {\n      selector2DCleanup();\n    }\n  };\n}\n\n/**\n * Update palette preview\n */\nfunction updatePalettePreview(container: HTMLElement, baseColor: OklchColor): void {\n  const palette = generatePalette(baseColor);\n\n  const html = Object.entries(palette)\n    .map(([shade, cssColor]) => {\n      return `\n        <div\n          class=\"color-picker__palette-swatch\"\n          style=\"background-color: ${cssColor}\"\n          title=\"${shade}: ${cssColor}\"\n        >\n          <span class=\"color-picker__palette-shade\">${shade}</span>\n        </div>\n      `;\n    })\n    .join('');\n\n  container.innerHTML = html;\n}\n\n/**\n * Update contrast information\n */\nfunction updateContrastInfo(element: HTMLElement, color: OklchColor): void {\n  const contrastRatioEl = element.querySelector('[data-contrast-ratio]');\n  const wcagBadgeEl = element.querySelector('[data-wcag-badge]');\n\n  if (!contrastRatioEl || !wcagBadgeEl) return;\n\n  // Check contrast against white background\n  const whiteBackground: OklchColor = { l: 95, c: 0.01, h: 0 };\n  const result = checkContrast(color, whiteBackground);\n\n  contrastRatioEl.textContent = `${result.ratio}:1`;\n\n  // Update WCAG badge\n  if (result.wcagAAA) {\n    wcagBadgeEl.textContent = 'AAA';\n    wcagBadgeEl.className = 'color-picker__wcag-badge color-picker__wcag-badge--aaa';\n  } else if (result.wcagAA) {\n    wcagBadgeEl.textContent = 'AA';\n    wcagBadgeEl.className = 'color-picker__wcag-badge color-picker__wcag-badge--aa';\n  } else {\n    wcagBadgeEl.textContent = 'Fail';\n    wcagBadgeEl.className = 'color-picker__wcag-badge color-picker__wcag-badge--fail';\n  }\n}\n\n/**\n * Set color picker value programmatically\n *\n * @param element - Color picker container\n * @param color - New OKLCH color\n *\n * @example\n * setColorPickerValue(container, { l: 70, c: 0.2, h: 180 });\n */\nexport function setColorPickerValue(element: HTMLElement, color: OklchColor): void {\n  const lightnessInput = element.querySelector('[data-lightness]') as HTMLInputElement;\n  const chromaInput = element.querySelector('[data-chroma]') as HTMLInputElement;\n  const hueInput = element.querySelector('[data-hue]') as HTMLInputElement;\n\n  if (lightnessInput) lightnessInput.value = String(color.l);\n  if (chromaInput) chromaInput.value = String(color.c);\n  if (hueInput) hueInput.value = String(color.h);\n\n  // Trigger input event to update UI\n  lightnessInput?.dispatchEvent(new Event('input', { bubbles: true }));\n}\n\n/**\n * Get color picker value\n *\n * @param element - Color picker container\n * @returns Current OKLCH color\n *\n * @example\n * const color = getColorPickerValue(container);\n * console.log(color); // { l: 60, c: 0.18, h: 262 }\n */\nexport function getColorPickerValue(element: HTMLElement): OklchColor | null {\n  const lightnessInput = element.querySelector('[data-lightness]') as HTMLInputElement;\n  const chromaInput = element.querySelector('[data-chroma]') as HTMLInputElement;\n  const hueInput = element.querySelector('[data-hue]') as HTMLInputElement;\n\n  if (!lightnessInput || !chromaInput || !hueInput) {\n    return null;\n  }\n\n  return {\n    l: parseFloat(lightnessInput.value),\n    c: parseFloat(chromaInput.value),\n    h: parseFloat(hueInput.value)\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/components/color-presets.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/components/color-selector-2d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/components/image-uploader.ts","messages":[{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":129,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":129,"endColumn":56,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[3885,3885],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[3885,3885],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-floating-promises","severity":2,"message":"Promises must be awaited, end with a call to .catch, end with a call to .then with a rejection handler or be explicitly marked as ignored with the `void` operator.","line":143,"column":5,"nodeType":"ExpressionStatement","messageId":"floatingVoid","endLine":143,"endColumn":56,"suggestions":[{"messageId":"floatingFixVoid","fix":{"range":[4364,4364],"text":"void "},"desc":"Add void operator to ignore."},{"messageId":"floatingFixAwait","fix":{"range":[4364,4364],"text":"await "},"desc":"Add await operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":252,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":252,"endColumn":40},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":256,"column":29,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":256,"endColumn":42},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":278,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":278,"endColumn":40}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * Image Uploader Component (Modular, Progress-Tracked)\n * =============================================================================\n * Drag-and-drop image uploader with progress tracking\n * Integrates with content-api.ts for backend uploads\n * =============================================================================\n */\n\nimport { uploadImage, type UploadResult } from '../core/content-api.js';\n\n/**\n * Type alias for uploaded file data (extracted from UploadResult)\n */\nexport type UploadedFile = UploadResult['upload'];\n\n/**\n * Configuration (Tokenized)\n */\nconst CONFIG = {\n  MAX_FILES: 10,\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\n  ALLOWED_TYPES: ['image/jpeg', 'image/png', 'image/webp', 'image/gif'],\n  DRAG_HOVER_CLASS: 'upload-zone--dragover',\n  UPLOADING_CLASS: 'upload-zone--uploading',\n  SUCCESS_CLASS: 'upload-zone--success',\n  ERROR_CLASS: 'upload-zone--error'\n} as const;\n\n/**\n * Upload state for tracking\n */\ninterface UploadState {\n  file: File;\n  progress: number;\n  status: 'pending' | 'uploading' | 'complete' | 'error';\n  result?: UploadedFile;\n  error?: string;\n}\n\n/**\n * Private state\n */\nlet uploadQueue: UploadState[] = [];\nlet isUploading = false;\n\n/**\n * Initialize image uploader on an element\n *\n * @param container - Container element or selector\n * @param options - Configuration options\n * @returns Cleanup function\n *\n * @example\n * const cleanup = initImageUploader('#upload-zone', {\n *   onUpload: (result) => console.log('Uploaded:', result),\n *   multiple: true\n * });\n */\nexport function initImageUploader(\n  container: string | HTMLElement,\n  options: {\n    onUpload?: (result: UploadedFile) => void;\n    onBatchComplete?: (results: UploadedFile[]) => void;\n    multiple?: boolean;\n    autoInsert?: boolean; // Auto-insert image markdown/html into content\n  } = {}\n): () => void {\n  const element = typeof container === 'string'\n    ? document.querySelector<HTMLElement>(container)\n    : container;\n\n  if (!element) {\n    console.warn('Upload container not found');\n    return () => {};\n  }\n\n  // Create uploader UI if not exists\n  if (!element.querySelector('.upload-zone__droparea')) {\n    element.innerHTML = createUploaderHTML(options.multiple);\n  }\n\n  // Get references\n  const dropArea = element.querySelector<HTMLElement>('.upload-zone__droparea');\n  const fileInput = element.querySelector<HTMLInputElement>('input[type=\"file\"]');\n  const progressArea = element.querySelector<HTMLElement>('.upload-zone__progress');\n\n  if (!dropArea || !fileInput) {\n    console.warn('Upload components not found');\n    return () => {};\n  }\n\n  // Configure file input\n  fileInput.multiple = options.multiple ?? false;\n  fileInput.accept = CONFIG.ALLOWED_TYPES.join(',');\n\n  // Event handlers\n  const handlers: Array<[EventTarget, string, EventListener]> = [];\n\n  // Prevent default drag behaviors\n  const preventDefault = (e: Event) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {\n    dropArea.addEventListener(eventName, preventDefault);\n    handlers.push([dropArea, eventName, preventDefault]);\n  });\n\n  // Highlight drop area\n  const highlight = () => element.classList.add(CONFIG.DRAG_HOVER_CLASS);\n  const unhighlight = () => element.classList.remove(CONFIG.DRAG_HOVER_CLASS);\n\n  ['dragenter', 'dragover'].forEach(eventName => {\n    dropArea.addEventListener(eventName, highlight);\n    handlers.push([dropArea, eventName, highlight]);\n  });\n\n  ['dragleave', 'drop'].forEach(eventName => {\n    dropArea.addEventListener(eventName, unhighlight);\n    handlers.push([dropArea, eventName, unhighlight]);\n  });\n\n  // Handle drop\n  const handleDrop = (e: Event) => {\n    const dragEvent = e as DragEvent;\n    const files = Array.from(dragEvent.dataTransfer?.files || []);\n    handleFiles(files, element, progressArea, options);\n  };\n\n  dropArea.addEventListener('drop', handleDrop);\n  handlers.push([dropArea, 'drop', handleDrop]);\n\n  // Handle click to browse\n  const handleClick = () => fileInput.click();\n  dropArea.addEventListener('click', handleClick);\n  handlers.push([dropArea, 'click', handleClick]);\n\n  // Handle file selection\n  const handleSelect = (e: Event) => {\n    const files = Array.from((e.target as HTMLInputElement).files || []);\n    handleFiles(files, element, progressArea, options);\n  };\n\n  fileInput.addEventListener('change', handleSelect);\n  handlers.push([fileInput, 'change', handleSelect]);\n\n  // Return cleanup function\n  return () => {\n    handlers.forEach(([target, event, handler]) => {\n      target.removeEventListener(event, handler);\n    });\n  };\n}\n\n/**\n * Create uploader HTML\n */\nfunction createUploaderHTML(multiple?: boolean): string {\n  return `\n    <div class=\"upload-zone__droparea\">\n      <svg class=\"upload-zone__icon\" width=\"48\" height=\"48\" viewBox=\"0 0 24 24\">\n        <path fill=\"currentColor\" d=\"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z\"/>\n      </svg>\n      <p class=\"upload-zone__text\">\n        ${multiple\n          ? 'Drop images here or click to browse (max 10 files)'\n          : 'Drop an image here or click to browse'\n        }\n      </p>\n      <p class=\"upload-zone__hint\">\n        Supported: JPEG, PNG, WebP, GIF (max 10MB)\n      </p>\n      <input type=\"file\" accept=\"image/*\" style=\"display: none;\" />\n    </div>\n    <div class=\"upload-zone__progress\" style=\"display: none;\">\n      <div class=\"upload-progress\">\n        <!-- Progress items will be added here -->\n      </div>\n    </div>\n    <div class=\"upload-zone__results\" style=\"display: none;\">\n      <!-- Results will be shown here -->\n    </div>\n  `;\n}\n\n/**\n * Handle selected files\n */\nasync function handleFiles(\n  files: File[],\n  container: HTMLElement,\n  progressArea: HTMLElement | null,\n  options: {\n    onUpload?: (result: UploadedFile) => void;\n    onBatchComplete?: (results: UploadedFile[]) => void;\n    multiple?: boolean;\n    autoInsert?: boolean;\n  }\n): Promise<void> {\n  // Validate file count\n  if (!options.multiple && files.length > 1) {\n    files = [files[0]];\n  }\n\n  if (files.length > CONFIG.MAX_FILES) {\n    alert(`Maximum ${CONFIG.MAX_FILES} files allowed`);\n    files = files.slice(0, CONFIG.MAX_FILES);\n  }\n\n  // Validate files\n  const validFiles = files.filter(file => {\n    if (!CONFIG.ALLOWED_TYPES.includes(file.type as typeof CONFIG.ALLOWED_TYPES[number])) {\n      console.warn(`Invalid file type: ${file.type}`);\n      return false;\n    }\n    if (file.size > CONFIG.MAX_FILE_SIZE) {\n      console.warn(`File too large: ${file.name}`);\n      return false;\n    }\n    return true;\n  });\n\n  if (validFiles.length === 0) {\n    alert('No valid files selected');\n    return;\n  }\n\n  // Initialize upload queue\n  uploadQueue = validFiles.map(file => ({\n    file,\n    progress: 0,\n    status: 'pending' as const\n  }));\n\n  // Show progress area\n  if (progressArea) {\n    progressArea.style.display = 'block';\n    updateProgressDisplay(progressArea);\n  }\n\n  container.classList.add(CONFIG.UPLOADING_CLASS);\n  isUploading = true;\n\n  // Upload files\n  const results: UploadedFile[] = [];\n\n  for (let i = 0; i < uploadQueue.length; i++) {\n    const item = uploadQueue[i];\n    item.status = 'uploading';\n    updateProgressDisplay(progressArea!);\n\n    const result = await uploadImage(item.file, (progress) => {\n      item.progress = progress;\n      updateProgressDisplay(progressArea!);\n    });\n\n    if (result) {\n      item.status = 'complete';\n      item.result = result;\n      results.push(result);\n\n      // Call individual upload callback\n      if (options.onUpload) {\n        options.onUpload(result);\n      }\n\n      // Auto-insert if enabled\n      if (options.autoInsert) {\n        insertImageIntoContent(result);\n      }\n    } else {\n      item.status = 'error';\n      item.error = 'Upload failed';\n    }\n\n    updateProgressDisplay(progressArea!);\n  }\n\n  // Mark upload as complete\n  isUploading = false;\n  container.classList.remove(CONFIG.UPLOADING_CLASS);\n\n  // Show results\n  setTimeout(() => {\n    container.classList.add(CONFIG.SUCCESS_CLASS);\n    showResults(container, results);\n\n    // Call batch complete callback\n    if (options.onBatchComplete && results.length > 0) {\n      options.onBatchComplete(results);\n    }\n\n    // Reset after delay\n    setTimeout(() => {\n      container.classList.remove(CONFIG.SUCCESS_CLASS);\n      if (progressArea) progressArea.style.display = 'none';\n      uploadQueue = [];\n    }, 3000);\n  }, 500);\n}\n\n/**\n * Update progress display\n */\nfunction updateProgressDisplay(progressArea: HTMLElement): void {\n  const progressContainer = progressArea.querySelector('.upload-progress');\n  if (!progressContainer) return;\n\n  const itemsHTML = uploadQueue.map((item) => {\n    const iconClass = item.status === 'complete' ? 'success'\n                    : item.status === 'error' ? 'error'\n                    : item.status === 'uploading' ? 'uploading'\n                    : 'pending';\n\n    return `\n      <div class=\"upload-progress__item upload-progress__item--${iconClass}\">\n        <div class=\"upload-progress__info\">\n          <span class=\"upload-progress__name\">${item.file.name}</span>\n          <span class=\"upload-progress__size\">\n            ${(item.file.size / 1024).toFixed(1)} KB\n          </span>\n        </div>\n        <div class=\"upload-progress__bar\">\n          <div class=\"upload-progress__fill\" style=\"width: ${item.progress}%\"></div>\n        </div>\n        <span class=\"upload-progress__percent\">${item.progress}%</span>\n      </div>\n    `;\n  }).join('');\n\n  progressContainer.innerHTML = itemsHTML;\n}\n\n/**\n * Show upload results\n */\nfunction showResults(container: HTMLElement, results: UploadedFile[]): void {\n  const resultsArea = container.querySelector<HTMLElement>('.upload-zone__results');\n  if (!resultsArea || results.length === 0) return;\n\n  const resultsHTML = results.map(result => {\n    const savings = result.webp\n      ? `${result.webp.compression_ratio.toFixed(1)}% smaller`\n      : 'Original format';\n\n    return `\n      <div class=\"upload-result\">\n        <img\n          src=\"${result.webp?.url || result.original.url}\"\n          alt=\"Uploaded image\"\n          class=\"upload-result__thumbnail\"\n        />\n        <div class=\"upload-result__info\">\n          <p class=\"upload-result__size\">\n            ${result.original.width} × ${result.original.height}px\n          </p>\n          <p class=\"upload-result__savings\">${savings}</p>\n        </div>\n      </div>\n    `;\n  }).join('');\n\n  resultsArea.innerHTML = `\n    <h4 class=\"upload-zone__results-title\">\n      Uploaded ${results.length} ${results.length === 1 ? 'image' : 'images'}\n    </h4>\n    <div class=\"upload-results-grid\">\n      ${resultsHTML}\n    </div>\n  `;\n\n  resultsArea.style.display = 'block';\n\n  // Hide after delay\n  setTimeout(() => {\n    resultsArea.style.display = 'none';\n  }, 5000);\n}\n\n/**\n * Auto-insert image into content editor\n */\nfunction insertImageIntoContent(result: UploadedFile): void {\n  const contentArea = document.querySelector<HTMLTextAreaElement>('#content-body');\n  if (!contentArea) return;\n\n  const imageUrl = result.webp?.url || result.original.url;\n  const imageMarkdown = `\\n![Image](${imageUrl})\\n`;\n\n  // Insert at cursor position or end\n  const start = contentArea.selectionStart;\n  const end = contentArea.selectionEnd;\n  const text = contentArea.value;\n\n  contentArea.value = text.substring(0, start) + imageMarkdown + text.substring(end);\n\n  // Move cursor after inserted text\n  contentArea.selectionStart = contentArea.selectionEnd = start + imageMarkdown.length;\n  contentArea.focus();\n\n  // Trigger input event for change tracking\n  contentArea.dispatchEvent(new Event('input', { bubbles: true }));\n}\n\n/**\n * Get current upload status\n */\nexport function getUploadStatus(): {\n  isUploading: boolean;\n  queue: UploadState[];\n  progress: number;\n} {\n  const totalProgress = uploadQueue.length > 0\n    ? uploadQueue.reduce((sum, item) => sum + item.progress, 0) / uploadQueue.length\n    : 0;\n\n  return {\n    isUploading,\n    queue: [...uploadQueue],\n    progress: totalProgress\n  };\n}","usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/components/shade-matrix.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/controllers/content-editor.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":241,"column":22,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":241,"endColumn":41},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":247,"column":35,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":247,"endColumn":47},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":248,"column":38,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":248,"endColumn":49},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":251,"column":40,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":251,"endColumn":52},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":252,"column":43,"nodeType":"Identifier","messageId":"voidReturnArgument","endLine":252,"endColumn":54},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":379,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":409,"endColumn":6},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":412,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":420,"endColumn":6},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":588,"column":38,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":619,"endColumn":6},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":622,"column":41,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":630,"endColumn":6}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * Content Editor Controller - Simplified for Hero/Services/Portfolio\n * =============================================================================\n * Manages editing of hero, services, and portfolio sections\n * Aligned with _config.yml structure\n * =============================================================================\n */\n\nimport {\n  getHero,\n  updateHero,\n  getServices,\n  updateServices,\n  getPortfolio,\n  updatePortfolio,\n  type HeroData,\n  type ServicesData,\n  type PortfolioData,\n  type ServiceItem,\n  type PortfolioItem\n} from '../core/content-api.js';\nimport { EventName } from '../types/events.types.js';\nimport { emit } from '../core/event-bus.js';\nimport { initImageUploader } from '../components/image-uploader.js';\n\n/**\n * Initialize content editor on specified container\n *\n * @param containerId - Container element ID\n * @returns Cleanup function\n */\nexport async function initContentEditor(containerId: string): Promise<() => void> {\n  const container = document.getElementById(containerId);\n  if (!container) {\n    console.warn(`Content editor container not found: ${containerId}`);\n    return () => {};\n  }\n\n  // Create tab structure\n  container.innerHTML = `\n    <div class=\"content-editor\">\n      <nav class=\"content-editor__tabs\">\n        <button class=\"content-editor__tab content-editor__tab--active\" data-section=\"hero\">\n          <span class=\"tab-icon\">🎯</span>\n          <span>Hero Section</span>\n        </button>\n        <button class=\"content-editor__tab\" data-section=\"services\">\n          <span class=\"tab-icon\">⚡</span>\n          <span>Services</span>\n        </button>\n        <button class=\"content-editor__tab\" data-section=\"portfolio\">\n          <span class=\"tab-icon\">📂</span>\n          <span>Portfolio</span>\n        </button>\n      </nav>\n\n      <div class=\"content-editor__panels\">\n        <div id=\"hero-panel\" class=\"content-editor__panel content-editor__panel--active\">\n          <!-- Hero editor will be rendered here -->\n        </div>\n        <div id=\"services-panel\" class=\"content-editor__panel\">\n          <!-- Services editor will be rendered here -->\n        </div>\n        <div id=\"portfolio-panel\" class=\"content-editor__panel\">\n          <!-- Portfolio editor will be rendered here -->\n        </div>\n      </div>\n    </div>\n  `;\n\n  // Setup tab switching\n  const tabs = container.querySelectorAll('.content-editor__tab');\n  const panels = container.querySelectorAll('.content-editor__panel');\n\n  tabs.forEach(tab => {\n    tab.addEventListener('click', () => {\n      const section = (tab as HTMLElement).dataset.section;\n\n      // Update active states\n      tabs.forEach(t => t.classList.remove('content-editor__tab--active'));\n      panels.forEach(p => p.classList.remove('content-editor__panel--active'));\n\n      tab.classList.add('content-editor__tab--active');\n      const panel = container.querySelector(`#${section}-panel`);\n      if (panel) {\n        panel.classList.add('content-editor__panel--active');\n      }\n    });\n  });\n\n  // Initialize editors\n  const cleanupHero = await initHeroEditor('hero-panel');\n  const cleanupServices = await initServicesEditor('services-panel');\n  const cleanupPortfolio = await initPortfolioEditor('portfolio-panel');\n\n  // Return cleanup function\n  return () => {\n    cleanupHero();\n    cleanupServices();\n    cleanupPortfolio();\n  };\n}\n\n/**\n * =============================================================================\n * Hero Editor\n * =============================================================================\n */\n\nasync function initHeroEditor(panelId: string): Promise<() => void> {\n  const panel = document.getElementById(panelId);\n  if (!panel) return () => {};\n\n  // Load current hero data\n  const hero = await getHero();\n  if (!hero) {\n    panel.innerHTML = '<div class=\"error\">Failed to load hero data</div>';\n    return () => {};\n  }\n\n  // Render form\n  panel.innerHTML = `\n    <form class=\"content-editor__form\" id=\"hero-form\">\n      <div class=\"content-editor__field\">\n        <label class=\"content-editor__label\">Heading</label>\n        <input\n          type=\"text\"\n          class=\"content-editor__input\"\n          name=\"heading\"\n          value=\"${hero.heading}\"\n          required\n          maxlength=\"200\"\n        />\n      </div>\n\n      <div class=\"content-editor__field\">\n        <label class=\"content-editor__label\">Description</label>\n        <textarea\n          class=\"content-editor__textarea\"\n          name=\"description\"\n          required\n          maxlength=\"1000\"\n          rows=\"4\"\n        >${hero.description}</textarea>\n      </div>\n\n      <div class=\"content-editor__field\">\n        <label class=\"content-editor__label\">Button Text</label>\n        <input\n          type=\"text\"\n          class=\"content-editor__input\"\n          name=\"button_text\"\n          value=\"${hero.button_text}\"\n          required\n          maxlength=\"50\"\n        />\n      </div>\n\n      <div class=\"content-editor__field\">\n        <label class=\"content-editor__label\">Button Link</label>\n        <input\n          type=\"text\"\n          class=\"content-editor__input\"\n          name=\"button_link\"\n          value=\"${hero.button_link}\"\n          required\n          placeholder=\"#section or https://example.com\"\n        />\n      </div>\n\n      <div class=\"content-editor__field\">\n        <label class=\"content-editor__label\">Background Image</label>\n        <input\n          type=\"text\"\n          class=\"content-editor__input\"\n          name=\"background_image\"\n          value=\"${hero.background_image}\"\n          required\n          placeholder=\"img/header.jpg\"\n        />\n        <div id=\"hero-image-upload\" class=\"upload-zone\" style=\"margin-top: 10px;\"></div>\n      </div>\n\n      <div class=\"content-editor__actions\">\n        <button type=\"submit\" class=\"btn btn--primary btn--large\">\n          💾 Save Hero Section\n        </button>\n        <button type=\"button\" class=\"btn btn--secondary\" id=\"hero-reset\">\n          ↺ Reset\n        </button>\n      </div>\n    </form>\n  `;\n\n  // Setup image uploader\n  const uploadCleanup = initImageUploader('#hero-image-upload', {\n    multiple: false,\n    onUpload: (result) => {\n      const imageInput = panel.querySelector<HTMLInputElement>('[name=\"background_image\"]');\n      if (imageInput && result.original) {\n        imageInput.value = result.original.path;\n      }\n    }\n  });\n\n  // Handle form submission\n  const form = panel.querySelector('#hero-form') as HTMLFormElement;\n  const handleSubmit = async (e: Event) => {\n    e.preventDefault();\n\n    const formData = new FormData(form);\n    const heroData: HeroData = {\n      heading: formData.get('heading') as string,\n      description: formData.get('description') as string,\n      button_text: formData.get('button_text') as string,\n      button_link: formData.get('button_link') as string,\n      background_image: formData.get('background_image') as string\n    };\n\n    emit(EventName.CONFIG_SAVING, undefined);\n    const result = await updateHero(heroData);\n\n    if (result) {\n      alert('Hero section saved successfully!');\n      emit(EventName.CONFIG_SAVED, { section: 'hero' });\n    } else {\n      alert('Failed to save hero section');\n    }\n  };\n\n  // Handle reset\n  const resetBtn = panel.querySelector('#hero-reset') as HTMLButtonElement;\n  const handleReset = async () => {\n    if (confirm('Reset all changes?')) {\n      const freshData = await getHero();\n      if (freshData) {\n        form.reset();\n        Object.entries(freshData).forEach(([key, value]) => {\n          const input = form.querySelector(`[name=\"${key}\"]`) as HTMLInputElement;\n          if (input) input.value = value;\n        });\n      }\n    }\n  };\n\n  form.addEventListener('submit', handleSubmit);\n  resetBtn.addEventListener('click', handleReset);\n\n  return () => {\n    form.removeEventListener('submit', handleSubmit);\n    resetBtn.removeEventListener('click', handleReset);\n    uploadCleanup();\n  };\n}\n\n/**\n * =============================================================================\n * Services Editor\n * =============================================================================\n */\n\nasync function initServicesEditor(panelId: string): Promise<() => void> {\n  const panel = document.getElementById(panelId);\n  if (!panel) return () => {};\n\n  // Load current services data\n  const services = await getServices();\n  if (!services) {\n    panel.innerHTML = '<div class=\"error\">Failed to load services data</div>';\n    return () => {};\n  }\n\n  let currentServices = { ...services };\n\n  const renderServicesForm = () => {\n    panel.innerHTML = `\n      <form class=\"content-editor__form\" id=\"services-form\">\n        <div class=\"content-editor__field\">\n          <label class=\"content-editor__label\">Section Heading</label>\n          <input\n            type=\"text\"\n            class=\"content-editor__input\"\n            name=\"heading\"\n            value=\"${currentServices.heading}\"\n            required\n            maxlength=\"200\"\n          />\n        </div>\n\n        <div class=\"content-editor__array\">\n          <div class=\"content-editor__array-header\">\n            <h3>Services</h3>\n            <button type=\"button\" class=\"btn btn--small btn--primary\" id=\"add-service\">\n              + Add Service\n            </button>\n          </div>\n          <div id=\"services-list\" class=\"content-editor__array-list\">\n            ${currentServices.list.map((service, index) => renderServiceItem(service, index)).join('')}\n          </div>\n        </div>\n\n        <div class=\"content-editor__actions\">\n          <button type=\"submit\" class=\"btn btn--primary btn--large\">\n            💾 Save Services\n          </button>\n          <button type=\"button\" class=\"btn btn--secondary\" id=\"services-reset\">\n            ↺ Reset\n          </button>\n        </div>\n      </form>\n    `;\n\n    // Re-attach event listeners\n    attachServicesListeners();\n  };\n\n  const renderServiceItem = (service: ServiceItem, index: number) => `\n    <div class=\"service-item\" data-index=\"${index}\">\n      <div class=\"service-item__handle\">⋮⋮</div>\n      <div class=\"service-item__fields\">\n        <input\n          type=\"text\"\n          class=\"content-editor__input content-editor__input--small\"\n          placeholder=\"Icon (e.g., fa-diamond)\"\n          data-field=\"icon\"\n          value=\"${service.icon}\"\n          required\n        />\n        <input\n          type=\"text\"\n          class=\"content-editor__input\"\n          placeholder=\"Title\"\n          data-field=\"title\"\n          value=\"${service.title}\"\n          required\n        />\n        <textarea\n          class=\"content-editor__textarea content-editor__textarea--small\"\n          placeholder=\"Description\"\n          data-field=\"description\"\n          required\n          rows=\"2\"\n        >${service.description}</textarea>\n      </div>\n      <button type=\"button\" class=\"btn btn--danger btn--small\" data-action=\"delete\" data-index=\"${index}\">\n        Delete\n      </button>\n    </div>\n  `;\n\n  const attachServicesListeners = () => {\n    const form = panel.querySelector('#services-form') as HTMLFormElement;\n    const addBtn = panel.querySelector('#add-service') as HTMLButtonElement;\n    const resetBtn = panel.querySelector('#services-reset') as HTMLButtonElement;\n\n    // Add service\n    addBtn?.addEventListener('click', () => {\n      currentServices.list.push({\n        icon: 'fa-diamond',\n        title: 'New Service',\n        description: 'Service description'\n      });\n      renderServicesForm();\n    });\n\n    // Delete service\n    panel.querySelectorAll('[data-action=\"delete\"]').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const index = parseInt((e.target as HTMLElement).dataset.index || '0');\n        if (confirm('Delete this service?')) {\n          currentServices.list.splice(index, 1);\n          renderServicesForm();\n        }\n      });\n    });\n\n    // Save\n    form?.addEventListener('submit', async (e) => {\n      e.preventDefault();\n\n      // Collect data from form\n      const heading = (form.querySelector('[name=\"heading\"]') as HTMLInputElement).value;\n      const serviceItems: ServiceItem[] = [];\n\n      panel.querySelectorAll('.service-item').forEach(item => {\n        const icon = (item.querySelector('[data-field=\"icon\"]') as HTMLInputElement).value;\n        const title = (item.querySelector('[data-field=\"title\"]') as HTMLInputElement).value;\n        const description = (item.querySelector('[data-field=\"description\"]') as HTMLTextAreaElement).value;\n\n        serviceItems.push({ icon, title, description });\n      });\n\n      const servicesData: ServicesData = {\n        heading,\n        list: serviceItems\n      };\n\n      emit(EventName.CONFIG_SAVING, undefined);\n      const result = await updateServices(servicesData);\n\n      if (result) {\n        currentServices = result;\n        alert('Services saved successfully!');\n        emit(EventName.CONFIG_SAVED, { section: 'services' });\n      } else {\n        alert('Failed to save services');\n      }\n    });\n\n    // Reset\n    resetBtn?.addEventListener('click', async () => {\n      if (confirm('Reset all changes?')) {\n        const freshData = await getServices();\n        if (freshData) {\n          currentServices = freshData;\n          renderServicesForm();\n        }\n      }\n    });\n  };\n\n  renderServicesForm();\n\n  return () => {\n    // Cleanup handled by re-render\n  };\n}\n\n/**\n * =============================================================================\n * Portfolio Editor\n * =============================================================================\n */\n\nasync function initPortfolioEditor(panelId: string): Promise<() => void> {\n  const panel = document.getElementById(panelId);\n  if (!panel) return () => {};\n\n  // Load current portfolio data\n  const portfolio = await getPortfolio();\n  if (!portfolio) {\n    panel.innerHTML = '<div class=\"error\">Failed to load portfolio data</div>';\n    return () => {};\n  }\n\n  let currentPortfolio = { ...portfolio };\n\n  const renderPortfolioForm = () => {\n    panel.innerHTML = `\n      <form class=\"content-editor__form\" id=\"portfolio-form\">\n        <div class=\"content-editor__field\">\n          <label class=\"content-editor__label\">Section Heading</label>\n          <input\n            type=\"text\"\n            class=\"content-editor__input\"\n            name=\"portfolio_heading\"\n            value=\"${currentPortfolio.portfolio_heading}\"\n            required\n            maxlength=\"200\"\n          />\n        </div>\n\n        <div class=\"content-editor__array\">\n          <div class=\"content-editor__array-header\">\n            <h3>Portfolio Items</h3>\n            <button type=\"button\" class=\"btn btn--small btn--primary\" id=\"add-portfolio-item\">\n              + Add Portfolio Item\n            </button>\n          </div>\n          <div id=\"portfolio-list\" class=\"content-editor__array-list\">\n            ${currentPortfolio.portfolio_items.map((item, index) => renderPortfolioItem(item, index)).join('')}\n          </div>\n        </div>\n\n        <div class=\"content-editor__actions\">\n          <button type=\"submit\" class=\"btn btn--primary btn--large\">\n            💾 Save Portfolio\n          </button>\n          <button type=\"button\" class=\"btn btn--secondary\" id=\"portfolio-reset\">\n            ↺ Reset\n          </button>\n        </div>\n      </form>\n    `;\n\n    attachPortfolioListeners();\n  };\n\n  const renderPortfolioItem = (item: PortfolioItem, index: number) => `\n    <div class=\"portfolio-item\" data-index=\"${index}\">\n      <div class=\"portfolio-item__preview\">\n        <img src=\"${item.image}\" alt=\"${item.name}\" style=\"width: 100px; height: 100px; object-fit: cover;\" />\n      </div>\n      <div class=\"portfolio-item__fields\">\n        <input\n          type=\"text\"\n          class=\"content-editor__input content-editor__input--small\"\n          placeholder=\"Image path\"\n          data-field=\"image\"\n          value=\"${item.image}\"\n          required\n        />\n        <input\n          type=\"text\"\n          class=\"content-editor__input\"\n          placeholder=\"Project name\"\n          data-field=\"name\"\n          value=\"${item.name}\"\n          required\n        />\n        <input\n          type=\"text\"\n          class=\"content-editor__input content-editor__input--small\"\n          placeholder=\"Category\"\n          data-field=\"category\"\n          value=\"${item.category}\"\n          required\n        />\n        <input\n          type=\"text\"\n          class=\"content-editor__input content-editor__input--small\"\n          placeholder=\"Link\"\n          data-field=\"link\"\n          value=\"${item.link}\"\n          required\n        />\n        <textarea\n          class=\"content-editor__textarea content-editor__textarea--small\"\n          placeholder=\"Description (flip card)\"\n          data-field=\"flip_description\"\n          required\n          rows=\"2\"\n        >${item.flip_description}</textarea>\n        <div class=\"upload-zone upload-zone--inline\" id=\"portfolio-upload-${index}\"></div>\n      </div>\n      <button type=\"button\" class=\"btn btn--danger btn--small\" data-action=\"delete\" data-index=\"${index}\">\n        Delete\n      </button>\n    </div>\n  `;\n\n  const attachPortfolioListeners = () => {\n    const form = panel.querySelector('#portfolio-form') as HTMLFormElement;\n    const addBtn = panel.querySelector('#add-portfolio-item') as HTMLButtonElement;\n    const resetBtn = panel.querySelector('#portfolio-reset') as HTMLButtonElement;\n\n    // Setup image uploaders for each portfolio item\n    currentPortfolio.portfolio_items.forEach((_, index) => {\n      initImageUploader(`#portfolio-upload-${index}`, {\n        multiple: false,\n        onUpload: (result) => {\n          const item = panel.querySelector(`[data-index=\"${index}\"]`);\n          const imageInput = item?.querySelector('[data-field=\"image\"]') as HTMLInputElement;\n          if (imageInput && result.original) {\n            imageInput.value = result.original.path;\n            const preview = item?.querySelector('img') as HTMLImageElement;\n            if (preview) preview.src = result.original.url;\n          }\n        }\n      });\n    });\n\n    // Add portfolio item\n    addBtn?.addEventListener('click', () => {\n      currentPortfolio.portfolio_items.push({\n        image: 'img/portfolio/placeholder.jpg',\n        category: 'New Category',\n        name: 'New Project',\n        link: '#',\n        flip_description: 'Project description'\n      });\n      renderPortfolioForm();\n    });\n\n    // Delete portfolio item\n    panel.querySelectorAll('[data-action=\"delete\"]').forEach(btn => {\n      btn.addEventListener('click', (e) => {\n        const index = parseInt((e.target as HTMLElement).dataset.index || '0');\n        if (confirm('Delete this portfolio item?')) {\n          currentPortfolio.portfolio_items.splice(index, 1);\n          renderPortfolioForm();\n        }\n      });\n    });\n\n    // Save\n    form?.addEventListener('submit', async (e) => {\n      e.preventDefault();\n\n      const heading = (form.querySelector('[name=\"portfolio_heading\"]') as HTMLInputElement).value;\n      const portfolioItems: PortfolioItem[] = [];\n\n      panel.querySelectorAll('.portfolio-item').forEach(item => {\n        const image = (item.querySelector('[data-field=\"image\"]') as HTMLInputElement).value;\n        const name = (item.querySelector('[data-field=\"name\"]') as HTMLInputElement).value;\n        const category = (item.querySelector('[data-field=\"category\"]') as HTMLInputElement).value;\n        const link = (item.querySelector('[data-field=\"link\"]') as HTMLInputElement).value;\n        const flip_description = (item.querySelector('[data-field=\"flip_description\"]') as HTMLTextAreaElement).value;\n\n        portfolioItems.push({ image, name, category, link, flip_description });\n      });\n\n      const portfolioData: PortfolioData = {\n        portfolio_heading: heading,\n        portfolio_items: portfolioItems\n      };\n\n      emit(EventName.CONFIG_SAVING, undefined);\n      const result = await updatePortfolio(portfolioData);\n\n      if (result) {\n        currentPortfolio = result;\n        alert('Portfolio saved successfully!');\n        emit(EventName.CONFIG_SAVED, { section: 'portfolio' });\n      } else {\n        alert('Failed to save portfolio');\n      }\n    });\n\n    // Reset\n    resetBtn?.addEventListener('click', async () => {\n      if (confirm('Reset all changes?')) {\n        const freshData = await getPortfolio();\n        if (freshData) {\n          currentPortfolio = freshData;\n          renderPortfolioForm();\n        }\n      }\n    });\n  };\n\n  renderPortfolioForm();\n\n  return () => {\n    // Cleanup handled by re-render\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/controllers/theme-editor.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":293,"column":22,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":293,"endColumn":101,"fix":{"range":[9556,9588],"text":""}},{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":294,"column":25,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":294,"endColumn":107,"fix":{"range":[9664,9696],"text":""}},{"ruleId":"@typescript-eslint/no-misused-promises","severity":2,"message":"Promise returned in function argument where a void return was expected.","line":302,"column":39,"nodeType":"ArrowFunctionExpression","messageId":"voidReturnArgument","endLine":316,"endColumn":6}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * Theme Editor Controller\n * =============================================================================\n * Main orchestrator for the theme editor\n * Coordinates config manager, color pickers, preview, and UI state\n * =============================================================================\n */\n\nimport type { OklchColor, ActiveColorKey } from '../types/color.types.js';\nimport type { ThemeConfig } from '../types/config.types.js';\nimport {\n  loadConfig,\n  updateConfig,\n  saveConfig,\n  resetConfig,\n  isDirtyConfig,\n  getConfig\n} from '../core/config-manager.js';\nimport { on, emit } from '../core/event-bus.js';\nimport { EventName } from '../types/events.types.js';\nimport {\n  createColorPickerHTML,\n  initColorPicker\n} from '../components/color-picker.js';\nimport { renderColorCard, initColorCard } from '../components/color-card.js';\nimport { renderColorGradient } from '../components/color-gradient.js';\nimport { renderShadeMatrix } from '../components/shade-matrix.js';\nimport { renderColorHarmonies } from '../components/color-harmonies.js';\nimport { renderColorPresets, initColorPresets } from '../components/color-presets.js';\nimport { rotateHue } from '../utils/color-theory.js';\n\n/**\n * Theme editor state\n */\ninterface EditorState {\n  isLoading: boolean;\n  isSaving: boolean;\n  activeColor: ActiveColorKey;\n  isSecondaryEnabled: boolean;\n  pickerCleanup?: () => void;\n}\n\n/**\n * Initialize theme editor\n *\n * @param containerId - Container element ID\n * @returns Cleanup function\n *\n * @example\n * const cleanup = await initThemeEditor('theme-editor');\n * // Later: cleanup();\n */\nexport async function initThemeEditor(containerId: string): Promise<() => void> {\n  const container = document.getElementById(containerId);\n\n  if (!container) {\n    console.error(`Theme editor: container #${containerId} not found`);\n    return () => {};\n  }\n\n  const state: EditorState = {\n    isLoading: true,\n    isSaving: false,\n    activeColor: 'primary',\n    isSecondaryEnabled: false\n  };\n\n  // Show loading state\n  showLoadingState(container);\n\n  // Load configuration\n  const theme = await loadConfig();\n\n  if (!theme) {\n    showErrorState(container, 'Failed to load theme configuration');\n    return () => {};\n  }\n\n  state.isLoading = false;\n  state.isSecondaryEnabled = theme.brand_secondary !== null && theme.brand_secondary !== undefined;\n\n  // Render editor UI\n  renderEditor(container, theme, state);\n\n  // Initialize components\n  const cleanupFunctions = initializeComponents(container, theme, state);\n\n  // Setup event listeners\n  setupEventListeners(container, state);\n\n  return () => {\n    cleanupFunctions.forEach(fn => fn());\n  };\n}\n\n/**\n * Render editor UI structure\n */\nfunction renderEditor(container: HTMLElement, theme: ThemeConfig, state: EditorState): void {\n  const primaryColor = theme.brand_primary;\n  const secondaryColor = theme.brand_secondary || rotateHue(primaryColor, 180);\n  const currentColor = state.activeColor === 'primary' ? primaryColor : secondaryColor;\n\n  container.innerHTML = `\n    <div class=\"theme-editor\">\n      <header class=\"theme-editor__header\">\n        <h2 class=\"theme-editor__title\">Theme Editor</h2>\n      </header>\n\n      <div class=\"theme-editor__content\">\n        <!-- Brand Colors Section -->\n        <section class=\"theme-section\">\n          <header class=\"theme-section__header\">\n            <h3 class=\"theme-section__title\">Brand Colors</h3>\n\n            <label class=\"toggle-switch\">\n              <input\n                type=\"checkbox\"\n                data-secondary-toggle\n                ${state.isSecondaryEnabled ? 'checked' : ''}\n              />\n              <span class=\"toggle-switch__slider\"></span>\n              <span class=\"toggle-switch__label\">Enable Secondary Color</span>\n            </label>\n          </header>\n\n          <div class=\"color-cards-container\" data-color-cards>\n            ${renderColorCard(primaryColor, 'primary', state.activeColor === 'primary')}\n            ${state.isSecondaryEnabled ? renderColorCard(secondaryColor, 'secondary', state.activeColor === 'secondary') : ''}\n          </div>\n        </section>\n\n        <!-- Color Picker Section (Shared) -->\n        <section class=\"theme-section\">\n          <header class=\"theme-section__header\">\n            <h3 class=\"theme-section__title\">\n              Editing: <span class=\"color-key-label\">${capitalizeFirst(state.activeColor)} Color</span>\n            </h3>\n          </header>\n\n          <div data-color-picker-container></div>\n        </section>\n\n        <!-- Visualizations Section -->\n        <section class=\"theme-section theme-section--visualizations\">\n          <header class=\"theme-section__header\">\n            <h3 class=\"theme-section__title\">Color Analysis</h3>\n          </header>\n\n          <div class=\"visualizations-grid\">\n            ${renderColorGradient(currentColor)}\n            ${renderShadeMatrix(currentColor)}\n            ${renderColorHarmonies(currentColor)}\n            ${renderColorPresets()}\n          </div>\n        </section>\n\n        <!-- Theme Settings Section -->\n        <section class=\"theme-section theme-section--collapsible\" data-section=\"theme-settings\">\n          <h3 class=\"theme-section__title\" data-toggle>\n            <span class=\"theme-section__icon\">⚙️</span>\n            <span>Theme Settings</span>\n            <span class=\"theme-section__arrow\">▼</span>\n          </h3>\n\n          <div class=\"theme-section__content\" data-content>\n            <!-- Theme Mode -->\n            <div class=\"theme-setting-group\">\n              <label class=\"theme-setting__label\">Theme Mode</label>\n              <div class=\"theme-setting__options\">\n                ${['auto', 'light', 'dark'].map(mode => `\n                  <label class=\"theme-radio\">\n                    <input\n                      type=\"radio\"\n                      name=\"theme-mode\"\n                      value=\"${mode}\"\n                      ${theme.mode === mode ? 'checked' : ''}\n                      data-mode-radio\n                    />\n                    <span>${capitalizeFirst(mode)}</span>\n                  </label>\n                `).join('')}\n              </div>\n            </div>\n\n            <!-- Neutral Palette -->\n            <div class=\"theme-setting-group\">\n              <label class=\"theme-setting__label\">Neutral Palette</label>\n              <div class=\"theme-setting__options\">\n                ${['slate', 'gray', 'zinc', 'neutral', 'stone'].map(neutral => `\n                  <label class=\"theme-radio\">\n                    <input\n                      type=\"radio\"\n                      name=\"neutral-palette\"\n                      value=\"${neutral}\"\n                      ${theme.neutral === neutral ? 'checked' : ''}\n                      data-neutral-radio\n                    />\n                    <span>${capitalizeFirst(neutral)}</span>\n                  </label>\n                `).join('')}\n              </div>\n            </div>\n          </div>\n        </section>\n      </div>\n\n      <footer class=\"theme-editor__footer\">\n        <button\n          class=\"theme-editor__button theme-editor__button--secondary\"\n          data-reset-btn\n          disabled\n        >\n          Reset\n        </button>\n        <button\n          class=\"theme-editor__button theme-editor__button--primary\"\n          data-save-btn\n          disabled\n        >\n          💾 Save Changes\n        </button>\n      </footer>\n    </div>\n  `;\n}\n\n/**\n * Utility: Capitalize first letter\n */\nfunction capitalizeFirst(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\n/**\n * Initialize all components\n */\nfunction initializeComponents(\n  container: HTMLElement,\n  theme: ThemeConfig,\n  state: EditorState\n): Array<() => void> {\n  const cleanupFunctions: Array<() => void> = [];\n\n  // Initialize color cards\n  const cardsContainer = container.querySelector('[data-color-cards]') as HTMLElement;\n  if (cardsContainer) {\n    initColorCard(cardsContainer);\n  }\n\n  // Initialize shared color picker\n  const pickerContainer = container.querySelector('[data-color-picker-container]') as HTMLElement;\n  if (pickerContainer) {\n    const currentColor = state.activeColor === 'primary' ? theme.brand_primary : (theme.brand_secondary || rotateHue(theme.brand_primary, 180));\n    const configKey = state.activeColor === 'primary' ? 'brand_primary' : 'brand_secondary';\n\n    pickerContainer.innerHTML = createColorPickerHTML(\n      `${state.activeColor}-color`,\n      `${capitalizeFirst(state.activeColor)} Color`,\n      currentColor\n    );\n\n    const pickerEl = pickerContainer.querySelector('[data-picker]') as HTMLElement;\n    if (pickerEl) {\n      const cleanup = initColorPicker(\n        pickerEl,\n        currentColor,\n        configKey,\n        (color: OklchColor) => {\n          updateConfig(configKey, color);\n        }\n      );\n      cleanupFunctions.push(cleanup);\n    }\n  }\n\n  // Initialize color presets\n  const presetsContainer = container.querySelector('.color-presets') as HTMLElement;\n  if (presetsContainer) {\n    initColorPresets(presetsContainer, state.activeColor);\n  }\n\n  return cleanupFunctions;\n}\n\n/**\n * Setup event listeners for UI controls\n */\nfunction setupEventListeners(container: HTMLElement, state: EditorState): void {\n  const saveBtn = container.querySelector('[data-save-btn]') as HTMLButtonElement;\n  const resetBtn = container.querySelector('[data-reset-btn]') as HTMLButtonElement;\n  const modeRadios = container.querySelectorAll('[data-mode-radio]') as NodeListOf<HTMLInputElement>;\n  const neutralRadios = container.querySelectorAll('[data-neutral-radio]') as NodeListOf<HTMLInputElement>;\n  const secondaryToggle = container.querySelector('[data-secondary-toggle]') as HTMLInputElement;\n\n  // Setup collapsible sections\n  setupCollapsibleSections(container);\n\n  // Save button\n  if (saveBtn) {\n    saveBtn.addEventListener('click', async () => {\n      saveBtn.disabled = true;\n      saveBtn.textContent = 'Saving...';\n\n      const success = await saveConfig();\n\n      saveBtn.disabled = !isDirtyConfig();\n      saveBtn.textContent = '💾 Save Changes';\n\n      if (success) {\n        showSuccessMessage(container, 'Theme saved successfully!');\n      } else {\n        showErrorMessage(container, 'Failed to save theme');\n      }\n    });\n  }\n\n  // Reset button\n  if (resetBtn) {\n    resetBtn.addEventListener('click', () => {\n      if (confirm('Reset all changes? This cannot be undone.')) {\n        resetConfig();\n      }\n    });\n  }\n\n  // Mode radio buttons\n  modeRadios.forEach(radio => {\n    radio.addEventListener('change', () => {\n      if (radio.checked) {\n        updateConfig('mode', radio.value as 'light' | 'dark' | 'auto');\n      }\n    });\n  });\n\n  // Neutral radio buttons\n  neutralRadios.forEach(radio => {\n    radio.addEventListener('change', () => {\n      if (radio.checked) {\n        updateConfig('neutral', radio.value as 'slate' | 'gray' | 'zinc' | 'neutral' | 'stone');\n      }\n    });\n  });\n\n  // Secondary color toggle\n  if (secondaryToggle) {\n    secondaryToggle.addEventListener('change', () => {\n      if (secondaryToggle.checked) {\n        // Enable secondary color - generate complementary from primary\n        const theme = getConfig();\n        if (!theme) return;\n        const secondary = rotateHue(theme.brand_primary, 180);\n        updateConfig('brand_secondary', secondary);\n        state.isSecondaryEnabled = true;\n      } else {\n        // Disable secondary color\n        updateConfig('brand_secondary', null);\n        state.isSecondaryEnabled = false;\n        // Switch to primary if we were editing secondary\n        if (state.activeColor === 'secondary') {\n          state.activeColor = 'primary';\n        }\n      }\n      emit(EventName.SECONDARY_COLOR_TOGGLE, { enabled: secondaryToggle.checked });\n      // Re-render to update UI\n      const theme = getConfig();\n      if (!theme) return;\n      renderEditor(container, theme, state);\n      initializeComponents(container, theme, state);\n      setupEventListeners(container, state);\n    });\n  }\n\n  // Listen for active color change\n  on(EventName.ACTIVE_COLOR_CHANGE, ({ activeColor }) => {\n    state.activeColor = activeColor;\n    const theme = getConfig();\n    if (!theme) return;\n    renderEditor(container, theme, state);\n    initializeComponents(container, theme, state);\n    setupEventListeners(container, state);\n  });\n\n  // Listen for preset selection\n  on(EventName.COLOR_PRESET_SELECT, ({ preset, targetColor }) => {\n    const key = targetColor === 'primary' ? 'brand_primary' : 'brand_secondary';\n    updateConfig(key, preset.color);\n  });\n\n  // Listen to config dirty state changes\n  on(EventName.CONFIG_DIRTY, ({ isDirty }) => {\n    if (saveBtn) saveBtn.disabled = !isDirty;\n    if (resetBtn) resetBtn.disabled = !isDirty;\n  });\n\n  // Listen to config reset events\n  on(EventName.CONFIG_RESET, ({ theme }) => {\n    state.isSecondaryEnabled = theme.brand_secondary !== null && theme.brand_secondary !== undefined;\n    renderEditor(container, theme, state);\n    initializeComponents(container, theme, state);\n    setupEventListeners(container, state);\n  });\n}\n\n/**\n * Show loading state\n */\nfunction showLoadingState(container: HTMLElement): void {\n  container.innerHTML = `\n    <div class=\"theme-editor__loading\">\n      <div class=\"theme-editor__spinner\"></div>\n      <p>Loading theme configuration...</p>\n    </div>\n  `;\n}\n\n/**\n * Show error state\n */\nfunction showErrorState(container: HTMLElement, message: string): void {\n  container.innerHTML = `\n    <div class=\"theme-editor__error\">\n      <p class=\"theme-editor__error-message\">${message}</p>\n      <button onclick=\"window.location.reload()\">Reload</button>\n    </div>\n  `;\n}\n\n/**\n * Show success message (temporary)\n */\nfunction showSuccessMessage(container: HTMLElement, message: string): void {\n  const toast = document.createElement('div');\n  toast.className = 'theme-editor__toast theme-editor__toast--success';\n  toast.textContent = message;\n  container.appendChild(toast);\n\n  setTimeout(() => toast.remove(), 3000);\n}\n\n/**\n * Show error message (temporary)\n */\nfunction showErrorMessage(container: HTMLElement, message: string): void {\n  const toast = document.createElement('div');\n  toast.className = 'theme-editor__toast theme-editor__toast--error';\n  toast.textContent = message;\n  container.appendChild(toast);\n\n  setTimeout(() => toast.remove(), 5000);\n}\n\n/**\n * Setup collapsible sections\n */\nfunction setupCollapsibleSections(container: HTMLElement): void {\n  const sections = container.querySelectorAll('[data-section]');\n\n  sections.forEach(section => {\n    const toggle = section.querySelector('[data-toggle]') as HTMLElement;\n    const content = section.querySelector('[data-content]') as HTMLElement;\n    const arrow = section.querySelector('.theme-editor__section-arrow') as HTMLElement;\n\n    if (!toggle || !content) return;\n\n    // Start with sections expanded\n    section.classList.add('is-expanded');\n\n    toggle.addEventListener('click', () => {\n      const isExpanded = section.classList.contains('is-expanded');\n\n      if (isExpanded) {\n        // Collapse\n        section.classList.remove('is-expanded');\n        section.classList.add('is-collapsed');\n        if (arrow) arrow.textContent = '▶';\n      } else {\n        // Expand\n        section.classList.remove('is-collapsed');\n        section.classList.add('is-expanded');\n        if (arrow) arrow.textContent = '▼';\n      }\n    });\n\n    // Add hover effect\n    toggle.style.cursor = 'pointer';\n  });\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/core/config-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":52,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":52,"endColumn":55},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":161,"column":44,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":161,"endColumn":58},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":249,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":249,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":251,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":251,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":252,"column":23,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":252,"endColumn":67},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":252,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":252,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":370,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":370,"endColumn":39},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .success on an `any` value.","line":372,"column":15,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":372,"endColumn":22},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .theme on an `any` value.","line":372,"column":32,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":372,"endColumn":37},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string | undefined`.","line":373,"column":23,"nodeType":"LogicalExpression","messageId":"unsafeArgument","endLine":373,"endColumn":68},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .error on an `any` value.","line":373,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":373,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":377,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":377,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .theme on an `any` value.","line":377,"column":26,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":377,"endColumn":31},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":378,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":378,"endColumn":47},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .theme on an `any` value.","line":378,"column":41,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":378,"endColumn":46},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":381,"column":43,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":381,"endColumn":56}],"suppressedMessages":[],"errorCount":14,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * Config Manager (State Management)\n * =============================================================================\n * Manages theme configuration state, API interactions, and dirty state tracking\n * Functional architecture with private state\n * =============================================================================\n */\n\nimport type { ThemeConfig, ConfigResponse } from '../types/config.types.js';\nimport { EventName } from '../types/events.types.js';\nimport { emit } from './event-bus.js';\nimport { saveDraft, loadDraft, clearDraft, STORAGE_KEYS } from './storage-manager.js';\n\n/**\n * Private state\n */\nlet currentTheme: ThemeConfig | null = null;\nlet originalTheme: ThemeConfig | null = null;\nlet isDirty = false;\n\n/**\n * API endpoints (absolute URLs for development API server)\n * Connects to Roda API server on port 4001\n * Full CRUD operations supported with file locking\n */\nconst API_BASE = 'http://localhost:4001';\nconst API = {\n  GET_CONFIG: `${API_BASE}/api/config`,\n  UPDATE_CONFIG: `${API_BASE}/api/config`,\n  RESET_CONFIG: `${API_BASE}/api/config/reset`\n};\n\n/**\n * Load theme configuration from API\n *\n * @returns Theme config or null if failed\n *\n * @example\n * const theme = await loadConfig();\n * if (theme) {\n *   console.log('Loaded:', theme);\n * }\n */\nexport async function loadConfig(): Promise<ThemeConfig | null> {\n  try {\n    const response = await fetch(API.GET_CONFIG);\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data: ConfigResponse = await response.json();\n\n    if (!data.success || !data.theme) {\n      throw new Error('Invalid API response');\n    }\n\n    // Store as original\n    originalTheme = data.theme;\n\n    // Check for draft in localStorage\n    const draft = loadDraft<ThemeConfig>(STORAGE_KEYS.THEME_DRAFT);\n\n    if (draft) {\n      // Restore draft state\n      currentTheme = draft;\n      isDirty = !isConfigEqual(currentTheme, originalTheme);\n\n      if (isDirty) {\n        console.info('Restored unsaved theme changes from localStorage');\n        emit(EventName.CONFIG_DIRTY, { isDirty: true });\n      }\n    } else {\n      // No draft, use loaded config\n      currentTheme = structuredClone(data.theme);\n      isDirty = false;\n    }\n\n    // Emit loaded event\n    emit(EventName.CONFIG_LOADED, { theme: currentTheme });\n\n    return currentTheme;\n  } catch (error) {\n    console.error('Failed to load config:', error);\n    emit(EventName.CONFIG_ERROR, {\n      error: error as Error,\n      operation: 'load'\n    });\n    return null;\n  }\n}\n\n/**\n * Get current theme config\n *\n * @returns Current theme or null if not loaded\n *\n * @example\n * const theme = getConfig();\n * if (theme) {\n *   console.log('Current theme:', theme);\n * }\n */\nexport function getConfig(): ThemeConfig | null {\n  return currentTheme ? structuredClone(currentTheme) : null;\n}\n\n/**\n * Helper: Deep equality check for values (handles objects)\n */\nfunction isValueEqual(a: unknown, b: unknown): boolean {\n  // Same reference or primitive equality\n  if (a === b) return true;\n\n  // Handle null/undefined\n  if (a == null || b == null) return false;\n\n  // Different types\n  if (typeof a !== typeof b) return false;\n\n  // For objects, use JSON comparison (handles nested objects)\n  if (typeof a === 'object' && typeof b === 'object') {\n    return JSON.stringify(a) === JSON.stringify(b);\n  }\n\n  return false;\n}\n\n/**\n * Update a single theme property\n *\n * @param key - Theme property key\n * @param value - New value\n *\n * @example\n * updateConfig('brand_primary', { l: 60, c: 0.18, h: 262 });\n */\nexport function updateConfig<K extends keyof ThemeConfig>(\n  key: K,\n  value: ThemeConfig[K]\n): void {\n  if (!currentTheme) {\n    console.warn('Cannot update config: not loaded');\n    return;\n  }\n\n  const previousValue = currentTheme[key];\n\n  // Update current theme\n  currentTheme[key] = value;\n\n  // Mark as dirty if changed from original (using deep equality)\n  const wasOriginal = originalTheme && isValueEqual(originalTheme[key], previousValue);\n  const isOriginal = originalTheme && isValueEqual(originalTheme[key], value);\n\n  if (!isDirty && wasOriginal && !isOriginal) {\n    isDirty = true;\n    emit(EventName.CONFIG_DIRTY, { isDirty: true });\n  } else if (isDirty && !wasOriginal && isOriginal) {\n    // Check if all values match original\n    isDirty = !isConfigEqual(currentTheme, originalTheme!);\n    if (!isDirty) {\n      emit(EventName.CONFIG_DIRTY, { isDirty: false });\n    }\n  }\n\n  // Save draft to localStorage\n  saveDraft(STORAGE_KEYS.THEME_DRAFT, currentTheme);\n\n  // Emit change event\n  emit(EventName.CONFIG_CHANGE, {\n    key,\n    value,\n    previousValue,\n    theme: structuredClone(currentTheme)\n  });\n}\n\n/**\n * Update multiple theme properties at once\n *\n * @param updates - Partial theme config with updates\n *\n * @example\n * updateConfigBatch({\n *   brand_primary: { l: 60, c: 0.18, h: 262 },\n *   mode: 'dark'\n * });\n */\nexport function updateConfigBatch(updates: Partial<ThemeConfig>): void {\n  for (const [key, value] of Object.entries(updates)) {\n    updateConfig(key as keyof ThemeConfig, value);\n  }\n}\n\n/**\n * Check if config has unsaved changes\n *\n * @returns true if dirty (has unsaved changes)\n *\n * @example\n * if (isDirtyConfig()) {\n *   console.warn('You have unsaved changes!');\n * }\n */\nexport function isDirtyConfig(): boolean {\n  return isDirty;\n}\n\n/**\n * Save current config to _config.yml via API\n * Uses atomic file write with locking for safety\n *\n * @returns true if saved successfully\n *\n * @example\n * const success = await saveConfig();\n * if (success) {\n *   console.log('Configuration saved to _config.yml!');\n * }\n */\nexport async function saveConfig(): Promise<boolean> {\n  if (!currentTheme) {\n    console.warn('Cannot save config: not loaded');\n    return false;\n  }\n\n  if (!isDirty) {\n    console.info('No changes to save');\n    return true;\n  }\n\n  try {\n    emit(EventName.CONFIG_SAVING, undefined);\n\n    // Send theme updates to API\n    const response = await fetch(API.UPDATE_CONFIG, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        theme: currentTheme\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n\n    if (!data.success) {\n      throw new Error(data.error || 'Failed to save configuration');\n    }\n\n    // Update original to match current (mark as saved)\n    originalTheme = structuredClone(currentTheme);\n    isDirty = false;\n\n    // Clear draft from localStorage (successfully saved)\n    clearDraft(STORAGE_KEYS.THEME_DRAFT);\n\n    // Emit saved event\n    emit(EventName.CONFIG_SAVED, {\n      theme: currentTheme,\n      message: 'Theme configuration saved to _config.yml!'\n    });\n    emit(EventName.CONFIG_DIRTY, { isDirty: false });\n\n    return true;\n  } catch (error) {\n    console.error('Failed to save config:', error);\n    emit(EventName.CONFIG_ERROR, {\n      error: error as Error,\n      operation: 'save'\n    });\n    return false;\n  }\n}\n\n/**\n * Generate YAML snippet from theme config\n * Creates a formatted YAML block to paste into _config.yml\n *\n * @param theme - Theme configuration\n * @returns YAML formatted string\n *\n * @example\n * const yaml = generateYAMLSnippet(theme);\n * console.log(yaml);\n */\nexport function generateYAMLSnippet(theme: ThemeConfig): string {\n  const lines = [\n    '# ============================================================================',\n    '# Theme Configuration - Generated by Onboard Dashboard',\n    '# ============================================================================',\n    '# Copy and paste this into your _config.yml file, replacing the existing',\n    '# theme: section (lines starting with \"theme:\")',\n    '# ============================================================================',\n    '',\n    'theme:',\n  ];\n\n  // Brand primary (always present)\n  lines.push('  brand_primary:');\n  lines.push(`    l: ${theme.brand_primary.l}`);\n  lines.push(`    c: ${theme.brand_primary.c}`);\n  lines.push(`    h: ${theme.brand_primary.h}`);\n\n  // Brand secondary (optional)\n  if (theme.brand_secondary) {\n    lines.push('  brand_secondary:');\n    lines.push(`    l: ${theme.brand_secondary.l}`);\n    lines.push(`    c: ${theme.brand_secondary.c}`);\n    lines.push(`    h: ${theme.brand_secondary.h}`);\n  } else {\n    lines.push('  brand_secondary: null');\n  }\n\n  // Neutral and mode\n  lines.push(`  neutral: \"${theme.neutral}\"`);\n  lines.push(`  mode: \"${theme.mode}\"`);\n\n  lines.push('');\n  lines.push('# ============================================================================');\n\n  return lines.join('\\n');\n}\n\n/**\n * Reset config to original (loaded) state\n *\n * @example\n * resetConfig(); // Revert all unsaved changes\n */\nexport function resetConfig(): void {\n  if (!originalTheme) {\n    console.warn('Cannot reset config: no original state');\n    return;\n  }\n\n  currentTheme = structuredClone(originalTheme);\n  isDirty = false;\n\n  emit(EventName.CONFIG_RESET, { theme: currentTheme });\n  emit(EventName.CONFIG_DIRTY, { isDirty: false });\n}\n\n/**\n * Reset config to default values via API\n *\n * @returns true if reset successfully\n *\n * @example\n * const success = await resetToDefaults();\n * if (success) {\n *   console.log('Reset to defaults!');\n * }\n */\nexport async function resetToDefaults(): Promise<boolean> {\n  try {\n    const response = await fetch(API.RESET_CONFIG, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data = await response.json();\n\n    if (!data.success || !data.theme) {\n      throw new Error(data.error || 'Failed to reset configuration');\n    }\n\n    // Update both original and current\n    originalTheme = data.theme;\n    currentTheme = structuredClone(data.theme);\n    isDirty = false;\n\n    emit(EventName.CONFIG_RESET, { theme: currentTheme! });\n    emit(EventName.CONFIG_DIRTY, { isDirty: false });\n\n    return true;\n  } catch (error) {\n    console.error('Failed to reset to defaults:', error);\n    emit(EventName.CONFIG_ERROR, {\n      error: error as Error,\n      operation: 'reset'\n    });\n    return false;\n  }\n}\n\n/**\n * Helper: Check if two theme configs are equal\n */\nfunction isConfigEqual(a: ThemeConfig, b: ThemeConfig): boolean {\n  return JSON.stringify(a) === JSON.stringify(b);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/core/content-api.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":100,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":100,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":144,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":144,"endColumn":75},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":187,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":187,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":230,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":230,"endColumn":79},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":273,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":273,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":322,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":322,"endColumn":80},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":400,"column":19,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":400,"endColumn":72},{"ruleId":"@typescript-eslint/prefer-promise-reject-errors","severity":2,"message":"Expected the Promise rejection reason to be an Error.","line":407,"column":13,"nodeType":"CallExpression","messageId":"rejectAnError","endLine":407,"endColumn":26}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * Content API Client (Aligned with Roda API)\n * =============================================================================\n * Handles content management operations for hero, services, and portfolio\n * Communicates with Ruby Roda API server on port 4001\n * =============================================================================\n */\n\nimport {\n  isApiError\n} from '../types/content.types.js';\nimport type {\n  HeroData,\n  ServicesData,\n  PortfolioData,\n  HeroApiResponse,\n  ServicesApiResponse,\n  PortfolioApiResponse,\n  ApiErrorResponse\n} from '../types/content.types.js';\nimport { EventName } from '../types/events.types.js';\nimport { emit } from './event-bus.js';\n\n/**\n * API Configuration (Tokenized)\n */\nconst API_CONFIG = {\n  BASE_URL: 'http://localhost:4001',\n  TIMEOUT: 30000, // 30 seconds\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\n  ALLOWED_IMAGE_TYPES: ['image/jpeg', 'image/png', 'image/webp', 'image/gif']\n} as const;\n\n/**\n * API Endpoints (Matching Roda routes)\n */\nconst ENDPOINTS = {\n  HERO: `${API_CONFIG.BASE_URL}/api/content/hero`,\n  SERVICES: `${API_CONFIG.BASE_URL}/api/content/services`,\n  PORTFOLIO: `${API_CONFIG.BASE_URL}/api/content/portfolio`,\n  UPLOAD: `${API_CONFIG.BASE_URL}/api/upload`\n} as const;\n\n/**\n * Upload result interface\n */\nexport interface UploadResult {\n  success: boolean;\n  upload: {\n    original: {\n      url: string;\n      path: string;\n      size: number;\n      mime_type: string;\n      width: number;\n      height: number;\n    };\n    webp?: {\n      url: string;\n      path: string;\n      size: number;\n      width: number;\n      height: number;\n      compression_ratio: number;\n    };\n    thumbnails?: {\n      small?: { url: string; path: string; width: number; height: number };\n      medium?: { url: string; path: string; width: number; height: number };\n      large?: { url: string; path: string; width: number; height: number };\n    };\n  };\n}\n\n/**\n * =============================================================================\n * Hero Section API\n * =============================================================================\n */\n\n/**\n * Get hero section content\n *\n * @returns Hero data or null if failed\n *\n * @example\n * const hero = await getHero();\n * if (hero) {\n *   console.log(hero.heading, hero.description);\n * }\n */\nexport async function getHero(): Promise<HeroData | null> {\n  try {\n    const response = await fetch(ENDPOINTS.HERO);\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data: HeroApiResponse | ApiErrorResponse = await response.json();\n\n    if (isApiError(data)) {\n      throw new Error(data.error);\n    }\n\n    return data.hero;\n  } catch (error) {\n    console.error('Failed to get hero:', error);\n    emit(EventName.CONFIG_ERROR, {\n      error: error as Error,\n      operation: 'getHero'\n    });\n    return null;\n  }\n}\n\n/**\n * Update hero section\n *\n * @param heroData - Updated hero data\n * @returns Updated hero data or null if failed\n *\n * @example\n * const updated = await updateHero({\n *   heading: 'New Heading',\n *   description: 'New description',\n *   button_text: 'Click me',\n *   button_link: '#services',\n *   background_image: 'img/header.jpg'\n * });\n */\nexport async function updateHero(heroData: HeroData): Promise<HeroData | null> {\n  try {\n    const response = await fetch(ENDPOINTS.HERO, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ hero: heroData })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data: HeroApiResponse | ApiErrorResponse = await response.json();\n\n    if (isApiError(data)) {\n      throw new Error(data.message || data.error);\n    }\n\n    emit(EventName.CONFIG_SAVED, { section: 'hero', data: heroData });\n    return data.hero;\n  } catch (error) {\n    console.error('Failed to update hero:', error);\n    emit(EventName.CONFIG_ERROR, {\n      error: error as Error,\n      operation: 'updateHero'\n    });\n    return null;\n  }\n}\n\n/**\n * =============================================================================\n * Services Section API\n * =============================================================================\n */\n\n/**\n * Get services section content\n *\n * @returns Services data or null if failed\n *\n * @example\n * const services = await getServices();\n * if (services) {\n *   console.log(services.heading, services.list);\n * }\n */\nexport async function getServices(): Promise<ServicesData | null> {\n  try {\n    const response = await fetch(ENDPOINTS.SERVICES);\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data: ServicesApiResponse | ApiErrorResponse = await response.json();\n\n    if (isApiError(data)) {\n      throw new Error(data.error);\n    }\n\n    return data.services;\n  } catch (error) {\n    console.error('Failed to get services:', error);\n    emit(EventName.CONFIG_ERROR, {\n      error: error as Error,\n      operation: 'getServices'\n    });\n    return null;\n  }\n}\n\n/**\n * Update services section\n *\n * @param servicesData - Updated services data\n * @returns Updated services data or null if failed\n *\n * @example\n * const updated = await updateServices({\n *   heading: 'Our Services',\n *   list: [\n *     { icon: 'fa-laptop', title: 'Web Dev', description: '...' }\n *   ]\n * });\n */\nexport async function updateServices(servicesData: ServicesData): Promise<ServicesData | null> {\n  try {\n    const response = await fetch(ENDPOINTS.SERVICES, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ services: servicesData })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data: ServicesApiResponse | ApiErrorResponse = await response.json();\n\n    if (isApiError(data)) {\n      throw new Error(data.message || data.error);\n    }\n\n    emit(EventName.CONFIG_SAVED, { section: 'services', data: servicesData });\n    return data.services;\n  } catch (error) {\n    console.error('Failed to update services:', error);\n    emit(EventName.CONFIG_ERROR, {\n      error: error as Error,\n      operation: 'updateServices'\n    });\n    return null;\n  }\n}\n\n/**\n * =============================================================================\n * Portfolio Section API\n * =============================================================================\n */\n\n/**\n * Get portfolio section content\n *\n * @returns Portfolio data or null if failed\n *\n * @example\n * const portfolio = await getPortfolio();\n * if (portfolio) {\n *   console.log(portfolio.portfolio_heading, portfolio.portfolio_items);\n * }\n */\nexport async function getPortfolio(): Promise<PortfolioData | null> {\n  try {\n    const response = await fetch(ENDPOINTS.PORTFOLIO);\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data: PortfolioApiResponse | ApiErrorResponse = await response.json();\n\n    if (isApiError(data)) {\n      throw new Error(data.error);\n    }\n\n    return data.portfolio;\n  } catch (error) {\n    console.error('Failed to get portfolio:', error);\n    emit(EventName.CONFIG_ERROR, {\n      error: error as Error,\n      operation: 'getPortfolio'\n    });\n    return null;\n  }\n}\n\n/**\n * Update portfolio section\n *\n * @param portfolioData - Updated portfolio data\n * @returns Updated portfolio data or null if failed\n *\n * @example\n * const updated = await updatePortfolio({\n *   portfolio_heading: 'My Work',\n *   portfolio_items: [\n *     {\n *       image: 'img/portfolio/1.jpg',\n *       category: 'Web',\n *       name: 'Project 1',\n *       link: '#',\n *       flip_description: 'Cool project'\n *     }\n *   ]\n * });\n */\nexport async function updatePortfolio(portfolioData: PortfolioData): Promise<PortfolioData | null> {\n  try {\n    const response = await fetch(ENDPOINTS.PORTFOLIO, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ portfolio: portfolioData })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n    }\n\n    const data: PortfolioApiResponse | ApiErrorResponse = await response.json();\n\n    if (isApiError(data)) {\n      throw new Error(data.message || data.error);\n    }\n\n    emit(EventName.CONFIG_SAVED, { section: 'portfolio', data: portfolioData });\n    return data.portfolio;\n  } catch (error) {\n    console.error('Failed to update portfolio:', error);\n    emit(EventName.CONFIG_ERROR, {\n      error: error as Error,\n      operation: 'updatePortfolio'\n    });\n    return null;\n  }\n}\n\n/**\n * =============================================================================\n * Image Upload API\n * =============================================================================\n */\n\n/**\n * Upload an image file with progress tracking\n *\n * @param file - File to upload\n * @param onProgress - Progress callback (0-100)\n * @returns Upload result or null if failed\n *\n * @example\n * const result = await uploadImage(file, (progress) => {\n *   console.log(`Upload progress: ${progress}%`);\n * });\n */\nexport async function uploadImage(\n  file: File,\n  onProgress?: (progress: number) => void\n): Promise<UploadResult['upload'] | null> {\n  // Validate file type\n  if (!API_CONFIG.ALLOWED_IMAGE_TYPES.includes(file.type as typeof API_CONFIG.ALLOWED_IMAGE_TYPES[number])) {\n    emit(EventName.CONFIG_ERROR, {\n      error: new Error(`Invalid file type: ${file.type}`),\n      operation: 'upload'\n    });\n    return null;\n  }\n\n  // Validate file size\n  if (file.size > API_CONFIG.MAX_FILE_SIZE) {\n    emit(EventName.CONFIG_ERROR, {\n      error: new Error(`File too large: ${(file.size / 1024 / 1024).toFixed(1)}MB`),\n      operation: 'upload'\n    });\n    return null;\n  }\n\n  try {\n    const formData = new FormData();\n    formData.append('file', file);\n\n    // Use XMLHttpRequest for progress tracking\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      // Track upload progress\n      xhr.upload.addEventListener('progress', (e) => {\n        if (e.lengthComputable && onProgress) {\n          const progress = Math.round((e.loaded / e.total) * 100);\n          onProgress(progress);\n        }\n      });\n\n      // Handle completion\n      xhr.addEventListener('load', () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          try {\n            const response: UploadResult = JSON.parse(xhr.responseText);\n            if (response.success && response.upload) {\n              resolve(response.upload);\n            } else {\n              reject(new Error('Upload failed'));\n            }\n          } catch (error) {\n            reject(error);\n          }\n        } else {\n          reject(new Error(`HTTP ${xhr.status}: ${xhr.statusText}`));\n        }\n      });\n\n      // Handle errors\n      xhr.addEventListener('error', () => {\n        reject(new Error('Network error during upload'));\n      });\n\n      xhr.addEventListener('timeout', () => {\n        reject(new Error('Upload timeout'));\n      });\n\n      // Configure and send\n      xhr.open('POST', ENDPOINTS.UPLOAD);\n      xhr.timeout = API_CONFIG.TIMEOUT;\n      xhr.send(formData);\n    });\n  } catch (error) {\n    console.error('Upload failed:', error);\n    emit(EventName.CONFIG_ERROR, {\n      error: error as Error,\n      operation: 'upload'\n    });\n    return null;\n  }\n}\n\n/**\n * Batch upload multiple images\n *\n * @param files - Array of files to upload\n * @param onProgress - Progress callback for each file\n * @returns Array of upload results\n *\n * @example\n * const results = await batchUpload(files, (index, progress) => {\n *   console.log(`File ${index + 1}: ${progress}%`);\n * });\n */\nexport async function batchUpload(\n  files: File[],\n  onProgress?: (fileIndex: number, progress: number) => void\n): Promise<UploadResult['upload'][]> {\n  const results: UploadResult['upload'][] = [];\n\n  for (let i = 0; i < files.length; i++) {\n    const result = await uploadImage(files[i], (progress) => {\n      if (onProgress) {\n        onProgress(i, progress);\n      }\n    });\n\n    if (result) {\n      results.push(result);\n    }\n  }\n\n  return results;\n}\n\n/**\n * Re-export types for convenience\n */\nexport type {\n  HeroData,\n  ServicesData,\n  PortfolioData,\n  ServiceItem,\n  PortfolioItem\n} from '../types/content.types.js';\n","usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/core/event-bus.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[582,585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[582,585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1276,1279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1276,1279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":49,"column":3,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":49,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[1319,1320],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1421,1424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1421,1424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":75,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":75,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1964,1967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1964,1967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":76,"column":3,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":76,"endColumn":24,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2006,2007],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2075,2078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2075,2078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2430,2433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2430,2433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4908,4911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4908,4911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error, info.","line":208,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":208,"endColumn":20,"suggestions":[{"fix":{"range":[4926,4974],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * Event Bus (Pub/Sub System)\n * =============================================================================\n * Type-safe event system for component communication\n * Functional architecture with no classes\n * =============================================================================\n */\n\nimport { EventName } from '../types/events.types.js';\nimport type { EventMap, EventHandler } from '../types/events.types.js';\n\n/**\n * Event listener storage\n */\ntype Listener = {\n  handler: EventHandler<any>;\n  once: boolean;\n};\n\n/**\n * Event bus state (private)\n */\nconst listeners = new Map<EventName, Listener[]>();\n\n/**\n * Subscribe to an event\n *\n * @param event - Event name (type-safe)\n * @param handler - Event handler function\n * @returns Unsubscribe function\n *\n * @example\n * const unsubscribe = on(EventName.CONFIG_CHANGE, (payload) => {\n *   console.log('Config changed:', payload.key, payload.value);\n * });\n *\n * // Later: unsubscribe()\n */\nexport function on<K extends keyof EventMap>(\n  event: K,\n  handler: EventHandler<EventMap[K]>\n): () => void {\n  if (!listeners.has(event)) {\n    listeners.set(event, []);\n  }\n\n  const listener: Listener = { handler: handler as EventHandler<any>, once: false };\n  listeners.get(event)!.push(listener);\n\n  // Return unsubscribe function\n  return () => off(event, handler as EventHandler<any>);\n}\n\n/**\n * Subscribe to an event (one time only)\n *\n * @param event - Event name (type-safe)\n * @param handler - Event handler function\n * @returns Unsubscribe function\n *\n * @example\n * once(EventName.CONFIG_LOADED, (payload) => {\n *   console.log('Config loaded:', payload.theme);\n * });\n */\nexport function once<K extends keyof EventMap>(\n  event: K,\n  handler: EventHandler<EventMap[K]>\n): () => void {\n  if (!listeners.has(event)) {\n    listeners.set(event, []);\n  }\n\n  const listener: Listener = { handler: handler as EventHandler<any>, once: true };\n  listeners.get(event)!.push(listener);\n\n  return () => off(event, handler as EventHandler<any>);\n}\n\n/**\n * Unsubscribe from an event\n *\n * @param event - Event name\n * @param handler - Event handler to remove\n *\n * @example\n * const handleChange = (payload) => console.log(payload);\n * on(EventName.CONFIG_CHANGE, handleChange);\n * off(EventName.CONFIG_CHANGE, handleChange);\n */\nexport function off(\n  event: EventName,\n  handler: EventHandler<any>\n): void {\n  const eventListeners = listeners.get(event);\n  if (!eventListeners) return;\n\n  const filtered = eventListeners.filter(\n    listener => listener.handler !== handler\n  );\n\n  if (filtered.length === 0) {\n    listeners.delete(event);\n  } else {\n    listeners.set(event, filtered);\n  }\n}\n\n/**\n * Emit an event to all subscribers\n *\n * @param event - Event name (type-safe)\n * @param payload - Event payload (type-safe based on event)\n *\n * @example\n * emit(EventName.CONFIG_CHANGE, {\n *   key: 'brand_primary',\n *   value: { l: 60, c: 0.18, h: 262 },\n *   previousValue: { l: 50, c: 0.15, h: 220 },\n *   theme: updatedTheme\n * });\n */\nexport function emit<K extends keyof EventMap>(\n  event: K,\n  payload: EventMap[K]\n): void {\n  const eventListeners = listeners.get(event);\n  if (!eventListeners) return;\n\n  // Copy array to avoid issues if handlers modify listeners\n  const listenersCopy = [...eventListeners];\n\n  for (const listener of listenersCopy) {\n    try {\n      listener.handler(payload);\n    } catch (error) {\n      console.error(`Error in event handler for ${event}:`, error);\n    }\n\n    // Remove one-time listeners after execution\n    if (listener.once) {\n      off(event, listener.handler);\n    }\n  }\n}\n\n/**\n * Remove all listeners for a specific event\n *\n * @param event - Event name\n *\n * @example\n * clear(EventName.CONFIG_CHANGE);\n */\nexport function clear(event: EventName): void {\n  listeners.delete(event);\n}\n\n/**\n * Remove all listeners for all events\n *\n * @example\n * clearAll(); // Clean slate\n */\nexport function clearAll(): void {\n  listeners.clear();\n}\n\n/**\n * Get listener count for an event\n *\n * @param event - Event name\n * @returns Number of listeners\n *\n * @example\n * listenerCount(EventName.CONFIG_CHANGE) // 3\n */\nexport function listenerCount(event: EventName): number {\n  return listeners.get(event)?.length ?? 0;\n}\n\n/**\n * Get all registered event names\n *\n * @returns Array of event names with active listeners\n *\n * @example\n * getEvents() // [EventName.CONFIG_CHANGE, EventName.COLOR_CHANGE]\n */\nexport function getEvents(): EventName[] {\n  return Array.from(listeners.keys());\n}\n\n/**\n * Debug helper: log all events\n *\n * @param enable - Enable/disable event logging\n *\n * @example\n * debugEvents(true);  // Log all events\n * debugEvents(false); // Stop logging\n */\nexport function debugEvents(enable: boolean): void {\n  if (enable) {\n    for (const eventName of Object.values(EventName)) {\n      on(eventName, (payload: any) => {\n        console.log(`[EventBus] ${eventName}`, payload);\n      });\n    }\n  } else {\n    clearAll();\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/core/preview-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":108,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":108,"endColumn":25,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2928,2929],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":131,"column":5,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":131,"endColumn":48},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":141,"column":7,"nodeType":"AssignmentExpression","messageId":"anyAssignment","endLine":141,"endColumn":52}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * Preview Manager\n * =============================================================================\n * Manages live theme preview updates\n * Injects CSS custom properties and handles iframe communication\n * =============================================================================\n */\n\nimport type { ThemeConfig } from '../types/config.types.js';\nimport { toCssColor } from '../utils/color-convert.js';\nimport { generatePalette } from '../utils/palette-generator.js';\nimport { on } from '../core/event-bus.js';\nimport { EventName } from '../types/events.types.js';\n\n/**\n * Preview manager state\n */\ninterface PreviewState {\n  currentTheme: ThemeConfig | null;\n  targetElement: HTMLElement | null;\n  isIframe: boolean;\n}\n\nconst state: PreviewState = {\n  currentTheme: null,\n  targetElement: null,\n  isIframe: false\n};\n\n/**\n * Initialize preview manager\n *\n * @param target - Target element or iframe selector\n * @returns Cleanup function\n *\n * @example\n * // For same-page preview\n * const cleanup = initPreviewManager('#preview-container');\n *\n * // For iframe preview\n * const cleanup = initPreviewManager('#preview-iframe');\n */\nexport function initPreviewManager(targetSelector: string): () => void {\n  const target = document.querySelector(targetSelector);\n\n  if (!target) {\n    console.error(`Preview manager: target \"${targetSelector}\" not found`);\n    return () => {};\n  }\n\n  // Determine if target is an iframe\n  state.isIframe = target.tagName === 'IFRAME';\n\n  if (state.isIframe) {\n    const iframe = target as HTMLIFrameElement;\n    // Wait for iframe to load\n    iframe.addEventListener('load', () => {\n      state.targetElement = iframe.contentDocument?.documentElement || null;\n      if (state.currentTheme) {\n        applyTheme(state.currentTheme);\n      }\n    });\n  } else {\n    state.targetElement = target as HTMLElement;\n  }\n\n  // Listen to config events\n  const unsubscribeLoaded = on(EventName.CONFIG_LOADED, ({ theme }) => {\n    state.currentTheme = theme;\n    applyTheme(theme);\n  });\n\n  const unsubscribeChange = on(EventName.CONFIG_CHANGE, ({ theme }) => {\n    state.currentTheme = theme;\n    applyTheme(theme);\n  });\n\n  const unsubscribeReset = on(EventName.CONFIG_RESET, ({ theme }) => {\n    state.currentTheme = theme;\n    applyTheme(theme);\n  });\n\n  // Cleanup\n  return () => {\n    unsubscribeLoaded();\n    unsubscribeChange();\n    unsubscribeReset();\n    state.targetElement = null;\n    state.currentTheme = null;\n  };\n}\n\n/**\n * Apply theme to preview target\n */\nfunction applyTheme(theme: ThemeConfig): void {\n  if (!state.targetElement) {\n    console.warn('Preview manager: no target element');\n    return;\n  }\n\n  // Generate CSS custom properties\n  const cssVars = generateCSSVariables(theme);\n\n  // Apply to target element\n  Object.entries(cssVars).forEach(([property, value]) => {\n    state.targetElement!.style.setProperty(property, value);\n  });\n\n  // Update data-theme attribute\n  state.targetElement.setAttribute('data-theme', theme.mode);\n}\n\n/**\n * Generate CSS custom properties from theme config\n *\n * @param theme - Theme configuration\n * @returns CSS custom properties object\n *\n * @example\n * const vars = generateCSSVariables(theme);\n * // { '--color-primary': 'oklch(60% 0.18 262deg)', ... }\n */\nexport function generateCSSVariables(theme: ThemeConfig): Record<string, string> {\n  const vars: Record<string, string> = {};\n\n  // Generate primary color palette\n  const primaryPalette = generatePalette(theme.brand_primary);\n  Object.entries(primaryPalette).forEach(([shade, cssColor]) => {\n    vars[`--color-primary-${shade}`] = cssColor;\n  });\n\n  // Base primary color\n  vars['--color-primary'] = toCssColor(theme.brand_primary);\n\n  // Generate secondary color palette (if exists)\n  if (theme.brand_secondary) {\n    const secondaryPalette = generatePalette(theme.brand_secondary);\n    Object.entries(secondaryPalette).forEach(([shade, cssColor]) => {\n      vars[`--color-secondary-${shade}`] = cssColor;\n    });\n    vars['--color-secondary'] = toCssColor(theme.brand_secondary);\n  }\n\n  // Neutral palette selection\n  vars['--neutral-palette'] = theme.neutral;\n\n  // Theme mode\n  vars['--theme-mode'] = theme.mode;\n\n  return vars;\n}\n\n/**\n * Inject CSS variables into a style element\n *\n * @param theme - Theme configuration\n * @param targetDocument - Target document (default: current document)\n * @returns Style element\n *\n * @example\n * const styleEl = injectThemeStyles(theme);\n * // Appends <style> with CSS variables to document head\n */\nexport function injectThemeStyles(\n  theme: ThemeConfig,\n  targetDocument: Document = document\n): HTMLStyleElement {\n  // Remove existing theme style element\n  const existingStyle = targetDocument.getElementById('theme-preview-styles');\n  if (existingStyle) {\n    existingStyle.remove();\n  }\n\n  // Generate CSS variables\n  const vars = generateCSSVariables(theme);\n\n  // Create CSS text\n  const cssText = `:root {\n${Object.entries(vars)\n  .map(([property, value]) => `  ${property}: ${value};`)\n  .join('\\n')}\n}`;\n\n  // Create and inject style element\n  const styleEl = targetDocument.createElement('style');\n  styleEl.id = 'theme-preview-styles';\n  styleEl.textContent = cssText;\n  targetDocument.head.appendChild(styleEl);\n\n  return styleEl;\n}\n\n/**\n * Update preview with partial theme changes\n *\n * @param updates - Partial theme configuration\n *\n * @example\n * updatePreview({ mode: 'dark' });\n */\nexport function updatePreview(updates: Partial<ThemeConfig>): void {\n  if (!state.currentTheme) {\n    console.warn('Preview manager: no current theme');\n    return;\n  }\n\n  // Merge updates into current theme\n  const updatedTheme = { ...state.currentTheme, ...updates };\n  state.currentTheme = updatedTheme;\n\n  applyTheme(updatedTheme);\n}\n\n/**\n * Get current preview theme\n *\n * @returns Current theme or null\n */\nexport function getPreviewTheme(): ThemeConfig | null {\n  return state.currentTheme ? { ...state.currentTheme } : null;\n}\n\n/**\n * Reload preview (for iframe targets)\n *\n * @example\n * reloadPreview(); // Refreshes iframe\n */\nexport function reloadPreview(): void {\n  if (!state.isIframe || !state.targetElement) {\n    console.warn('Preview manager: cannot reload non-iframe target');\n    return;\n  }\n\n  const iframe = state.targetElement.ownerDocument?.defaultView?.frameElement as HTMLIFrameElement;\n  if (iframe && iframe.src) {\n    iframe.src = iframe.src; // Force reload\n  }\n}\n\n/**\n * Export current theme as CSS file\n *\n * @param filename - Output filename\n *\n * @example\n * exportThemeCSS('my-theme.css');\n */\nexport function exportThemeCSS(filename: string = 'theme.css'): void {\n  if (!state.currentTheme) {\n    console.warn('Preview manager: no current theme to export');\n    return;\n  }\n\n  const vars = generateCSSVariables(state.currentTheme);\n\n  const cssText = `:root {\n${Object.entries(vars)\n  .map(([property, value]) => `  ${property}: ${value};`)\n  .join('\\n')}\n}`;\n\n  // Create blob and download\n  const blob = new Blob([cssText], { type: 'text/css' });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = filename;\n  a.click();\n  URL.revokeObjectURL(url);\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/core/storage-manager.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":97,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":97,"endColumn":45},{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":214,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":214,"endColumn":35},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .timestamp on an `any` value.","line":215,"column":31,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":215,"endColumn":40}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * Storage Manager (localStorage with Expiration)\n * =============================================================================\n * Manages draft state persistence across tab navigation\n * Prevents data loss when switching between Theme/Content/Structure tabs\n * =============================================================================\n */\n\n/**\n * Storage keys (tokenized)\n */\nconst STORAGE_KEYS = {\n  THEME_DRAFT: 'onboard:draft:theme',\n  HERO_DRAFT: 'onboard:draft:hero',\n  SERVICES_DRAFT: 'onboard:draft:services',\n  PORTFOLIO_DRAFT: 'onboard:draft:portfolio',\n  ACTIVE_TAB: 'onboard:active-tab'\n} as const;\n\n/**\n * Draft expiration (24 hours in milliseconds)\n */\nconst DRAFT_EXPIRATION_MS = 24 * 60 * 60 * 1000;\n\n/**\n * Draft wrapper interface\n */\ninterface Draft<T> {\n  data: T;\n  timestamp: number;\n  expires: number;\n}\n\n/**\n * Check if localStorage is available\n *\n * @returns true if localStorage is supported and accessible\n */\nfunction isLocalStorageAvailable(): boolean {\n  try {\n    const test = '__storage_test__';\n    localStorage.setItem(test, test);\n    localStorage.removeItem(test);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Save draft data to localStorage\n *\n * @param key - Storage key\n * @param data - Data to save\n *\n * @example\n * saveDraft(STORAGE_KEYS.THEME_DRAFT, themeConfig);\n */\nexport function saveDraft<T>(key: string, data: T): void {\n  if (!isLocalStorageAvailable()) {\n    console.warn('localStorage not available');\n    return;\n  }\n\n  try {\n    const draft: Draft<T> = {\n      data,\n      timestamp: Date.now(),\n      expires: Date.now() + DRAFT_EXPIRATION_MS\n    };\n\n    localStorage.setItem(key, JSON.stringify(draft));\n  } catch (error) {\n    console.error('Failed to save draft:', error);\n  }\n}\n\n/**\n * Load draft data from localStorage\n *\n * @param key - Storage key\n * @returns Draft data or null if expired/not found\n *\n * @example\n * const theme = loadDraft<ThemeConfig>(STORAGE_KEYS.THEME_DRAFT);\n */\nexport function loadDraft<T>(key: string): T | null {\n  if (!isLocalStorageAvailable()) {\n    return null;\n  }\n\n  try {\n    const item = localStorage.getItem(key);\n    if (!item) return null;\n\n    const draft: Draft<T> = JSON.parse(item);\n\n    // Check expiration\n    if (Date.now() > draft.expires) {\n      localStorage.removeItem(key);\n      return null;\n    }\n\n    return draft.data;\n  } catch (error) {\n    console.error('Failed to load draft:', error);\n    return null;\n  }\n}\n\n/**\n * Clear draft data from localStorage\n *\n * @param key - Storage key\n *\n * @example\n * clearDraft(STORAGE_KEYS.THEME_DRAFT);\n */\nexport function clearDraft(key: string): void {\n  if (!isLocalStorageAvailable()) return;\n\n  try {\n    localStorage.removeItem(key);\n  } catch (error) {\n    console.error('Failed to clear draft:', error);\n  }\n}\n\n/**\n * Clear all drafts\n *\n * @example\n * clearAllDrafts(); // Clear everything on successful save\n */\nexport function clearAllDrafts(): void {\n  Object.values(STORAGE_KEYS).forEach(key => {\n    clearDraft(key);\n  });\n}\n\n/**\n * Save active tab selection\n *\n * @param tabId - Tab identifier (theme, content, structure, preview)\n *\n * @example\n * saveActiveTab('content');\n */\nexport function saveActiveTab(tabId: string): void {\n  if (!isLocalStorageAvailable()) return;\n\n  try {\n    localStorage.setItem(STORAGE_KEYS.ACTIVE_TAB, tabId);\n  } catch (error) {\n    console.error('Failed to save active tab:', error);\n  }\n}\n\n/**\n * Load active tab selection\n *\n * @returns Tab identifier or null\n *\n * @example\n * const lastTab = loadActiveTab();\n * if (lastTab) switchToTab(lastTab);\n */\nexport function loadActiveTab(): string | null {\n  if (!isLocalStorageAvailable()) return null;\n\n  try {\n    return localStorage.getItem(STORAGE_KEYS.ACTIVE_TAB);\n  } catch (error) {\n    console.error('Failed to load active tab:', error);\n    return null;\n  }\n}\n\n/**\n * Check if a draft exists\n *\n * @param key - Storage key\n * @returns true if valid draft exists\n *\n * @example\n * if (hasDraft(STORAGE_KEYS.THEME_DRAFT)) {\n *   console.log('Unsaved theme changes detected!');\n * }\n */\nexport function hasDraft(key: string): boolean {\n  return loadDraft(key) !== null;\n}\n\n/**\n * Get draft age in milliseconds\n *\n * @param key - Storage key\n * @returns Age in milliseconds or null if no draft\n *\n * @example\n * const age = getDraftAge(STORAGE_KEYS.THEME_DRAFT);\n * if (age && age > 3600000) {\n *   console.log('Draft is over 1 hour old');\n * }\n */\nexport function getDraftAge(key: string): number | null {\n  if (!isLocalStorageAvailable()) return null;\n\n  try {\n    const item = localStorage.getItem(key);\n    if (!item) return null;\n\n    const draft = JSON.parse(item);\n    return Date.now() - draft.timestamp;\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Export storage keys for external use\n */\nexport { STORAGE_KEYS };\n","usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/dashboard-nav.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/main.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/types/color.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/types/config.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/types/content.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/types/events.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/utils/color-constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/utils/color-convert.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/utils/color-theory.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":2,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":63,"column":43,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":63,"endColumn":85,"fix":{"range":[2014,2050],"text":""}}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * Color Theory Utilities\n * =============================================================================\n * Pure functions for color calculations (harmonies, shades, gradients)\n * =============================================================================\n */\n\nimport type { OklchColor, ColorHarmony, HarmonyType, ShadeScale } from '../types/color.types.js';\nimport { COLOR_CONSTANTS } from './color-constants.js';\nimport { clampOklch } from './color-convert.js';\nimport { oklchToHex } from './hex-converter.js';\n\n/**\n * Generate color harmony (complementary, triadic, analogous)\n */\nexport function generateHarmony(baseColor: OklchColor, type: HarmonyType): ColorHarmony {\n  const { l, c, h } = baseColor;\n  const angle = COLOR_CONSTANTS.HARMONY_ANGLES[type.toUpperCase() as keyof typeof COLOR_CONSTANTS.HARMONY_ANGLES];\n\n  let colors: OklchColor[];\n  let names: string[];\n\n  switch (type) {\n    case 'complementary':\n      colors = [\n        baseColor,\n        clampOklch({ l, c, h: (h + angle) % 360 }),\n      ];\n      names = ['Base', 'Complement'];\n      break;\n\n    case 'triadic':\n      colors = [\n        baseColor,\n        clampOklch({ l, c, h: (h + angle) % 360 }),\n        clampOklch({ l, c, h: (h + angle * 2) % 360 }),\n      ];\n      names = ['Base', 'Triadic 1', 'Triadic 2'];\n      break;\n\n    case 'analogous':\n      colors = [\n        clampOklch({ l, c, h: (h - angle + 360) % 360 }),\n        baseColor,\n        clampOklch({ l, c, h: (h + angle) % 360 }),\n      ];\n      names = ['Analogous -30°', 'Base', 'Analogous +30°'];\n      break;\n  }\n\n  return { type, colors, names };\n}\n\n/**\n * Generate shade scale (TailwindCSS-style: 50, 100, 200...950)\n */\nexport function generateShadeScale(baseColor: OklchColor): ShadeScale[] {\n  const { c, h } = baseColor;\n  const { SHADE_SCALE, SHADE_LIGHTNESS_MAP } = COLOR_CONSTANTS;\n\n  return SHADE_SCALE.map((weight) => {\n    const lightness = SHADE_LIGHTNESS_MAP[weight as keyof typeof SHADE_LIGHTNESS_MAP] * 100;\n    const color = clampOklch({ l: lightness, c, h });\n\n    return {\n      weight,\n      color,\n      hex: oklchToHex(color),\n    };\n  });\n}\n\n/**\n * Generate gradient steps (light to dark)\n */\nexport function generateGradient(baseColor: OklchColor, steps: number = COLOR_CONSTANTS.GRADIENT_STEPS): OklchColor[] {\n  const { c, h } = baseColor;\n  const { GRADIENT_LIGHTNESS_MIN, GRADIENT_LIGHTNESS_MAX } = COLOR_CONSTANTS;\n\n  const gradient: OklchColor[] = [];\n  const step = (GRADIENT_LIGHTNESS_MAX - GRADIENT_LIGHTNESS_MIN) / (steps - 1);\n\n  for (let i = 0; i < steps; i++) {\n    const l = GRADIENT_LIGHTNESS_MAX - step * i;\n    gradient.push(clampOklch({ l, c, h }));\n  }\n\n  return gradient;\n}\n\n/**\n * Adjust color lightness (for hover states, etc.)\n */\nexport function adjustLightness(color: OklchColor, delta: number): OklchColor {\n  return clampOklch({\n    l: color.l + delta,\n    c: color.c,\n    h: color.h,\n  });\n}\n\n/**\n * Adjust color chroma (saturation)\n */\nexport function adjustChroma(color: OklchColor, delta: number): OklchColor {\n  return clampOklch({\n    l: color.l,\n    c: color.c + delta,\n    h: color.h,\n  });\n}\n\n/**\n * Rotate hue\n */\nexport function rotateHue(color: OklchColor, degrees: number): OklchColor {\n  return clampOklch({\n    l: color.l,\n    c: color.c,\n    h: (color.h + degrees + 360) % 360,\n  });\n}\n","usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/utils/contrast-checker.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/utils/hex-converter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/home/groot/Github/modern_jekyll/onboard/src/utils/palette-generator.ts","messages":[{"ruleId":"@typescript-eslint/no-unsafe-assignment","severity":2,"message":"Unsafe assignment of an `any` value.","line":159,"column":11,"nodeType":"VariableDeclarator","messageId":"anyAssignment","endLine":159,"endColumn":89},{"ruleId":"@typescript-eslint/no-unsafe-call","severity":2,"message":"Unsafe call of a(n) `any` typed value.","line":159,"column":19,"nodeType":"MemberExpression","messageId":"unsafeCall","endLine":159,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access .match on an `any` value.","line":159,"column":28,"nodeType":"Identifier","messageId":"unsafeMemberExpression","endLine":159,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":162,"column":26,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":162,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [1] on an `any` value.","line":162,"column":32,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":162,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":163,"column":26,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":163,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [2] on an `any` value.","line":163,"column":32,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":163,"endColumn":33},{"ruleId":"@typescript-eslint/no-unsafe-argument","severity":2,"message":"Unsafe argument of type `any` assigned to a parameter of type `string`.","line":164,"column":26,"nodeType":"MemberExpression","messageId":"unsafeArgument","endLine":164,"endColumn":34},{"ruleId":"@typescript-eslint/no-unsafe-member-access","severity":2,"message":"Unsafe member access [3] on an `any` value.","line":164,"column":32,"nodeType":"Literal","messageId":"unsafeMemberExpression","endLine":164,"endColumn":33}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * =============================================================================\n * OKLCH Palette Generator\n * =============================================================================\n * Generate complete 10-shade color palettes from a single base OKLCH color\n * Based on research: oklch.org best practices (October 2025)\n * =============================================================================\n */\n\nimport type { OklchColor, ColorPalette } from '../types/color.types.js';\nimport { oklchToCss, clampOklch } from './color-convert.js';\n\n/**\n * Generate a 10-shade color palette from a base OKLCH color\n *\n * Algorithm:\n * - Lightness: Progresses from 95% (lightest) to base-40% (darkest)\n * - Chroma: Scales proportionally to maintain saturation consistency\n * - Hue: Remains constant across all shades\n *\n * @param base - Base OKLCH color (typically shade 500)\n * @returns Complete 10-shade palette (50-900)\n *\n * @example\n * const blue = { l: 60, c: 0.18, h: 262 };\n * const palette = generatePalette(blue);\n * // Returns: { 50: \"oklch(95% 0.072 262deg)\", ..., 900: \"oklch(20% 0.108 262deg)\" }\n */\nexport function generatePalette(base: OklchColor): ColorPalette {\n  const { h, c } = base;\n\n  // Lightness progression (perceptually uniform)\n  const lightnessSteps = {\n    50:  95,\n    100: 90,\n    200: 80,\n    300: 70,\n    400: 65,\n    500: base.l,  // Base lightness\n    600: base.l - 10,\n    700: base.l - 20,\n    800: base.l - 30,\n    900: base.l - 40\n  };\n\n  // Chroma scaling (maintains saturation consistency)\n  const chromaScale = {\n    50:  c * 0.4,\n    100: c * 0.5,\n    200: c * 0.6,\n    300: c * 0.7,\n    400: c * 0.8,\n    500: c,  // Base chroma\n    600: c * 0.9,\n    700: c * 0.8,\n    800: c * 0.7,\n    900: c * 0.6\n  };\n\n  const palette = {} as ColorPalette;\n\n  for (const [shade, lightness] of Object.entries(lightnessSteps)) {\n    const shadeKey = shade as unknown as keyof ColorPalette;\n    const chroma = chromaScale[shadeKey];\n    const color = clampOklch({ l: lightness, c: chroma, h });\n    palette[shadeKey] = oklchToCss(color);\n  }\n\n  return palette;\n}\n\n/**\n * Generate palette with custom lightness range\n *\n * Useful for creating palettes with specific lightness constraints\n *\n * @param base - Base OKLCH color\n * @param options - Lightness range options\n * @returns Custom color palette\n *\n * @example\n * const palette = generatePaletteCustom(\n *   { l: 60, c: 0.18, h: 262 },\n *   { lightest: 90, darkest: 30 }\n * );\n */\nexport function generatePaletteCustom(\n  base: OklchColor,\n  options: { lightest: number; darkest: number }\n): ColorPalette {\n  const { h, c } = base;\n  const { lightest, darkest } = options;\n  const range = lightest - darkest;\n\n  const lightnessSteps = {\n    50:  lightest,\n    100: lightest - range * 0.1,\n    200: lightest - range * 0.2,\n    300: lightest - range * 0.3,\n    400: lightest - range * 0.4,\n    500: base.l,\n    600: base.l - (range * 0.1),\n    700: base.l - (range * 0.2),\n    800: base.l - (range * 0.3),\n    900: darkest\n  };\n\n  const chromaScale = {\n    50:  c * 0.4,\n    100: c * 0.5,\n    200: c * 0.6,\n    300: c * 0.7,\n    400: c * 0.8,\n    500: c,\n    600: c * 0.9,\n    700: c * 0.8,\n    800: c * 0.7,\n    900: c * 0.6\n  };\n\n  const palette = {} as ColorPalette;\n\n  for (const [shade, lightness] of Object.entries(lightnessSteps)) {\n    const shadeKey = shade as unknown as keyof ColorPalette;\n    const chroma = chromaScale[shadeKey];\n    const color = clampOklch({ l: lightness, c: chroma, h });\n    palette[shadeKey] = oklchToCss(color);\n  }\n\n  return palette;\n}\n\n/**\n * Get a specific shade from a palette\n *\n * @param palette - Color palette\n * @param shade - Shade number (50-900)\n * @returns CSS color string\n */\nexport function getShade(palette: ColorPalette, shade: keyof ColorPalette): string {\n  return palette[shade];\n}\n\n/**\n * Adjust palette brightness globally\n *\n * @param palette - Original palette\n * @param adjustment - Lightness adjustment (-50 to +50)\n * @returns Adjusted palette\n */\nexport function adjustPaletteBrightness(\n  palette: ColorPalette,\n  adjustment: number\n): ColorPalette {\n  const adjusted = {} as ColorPalette;\n\n  for (const [shade, cssColor] of Object.entries(palette)) {\n    const shadeKey = shade as unknown as keyof ColorPalette;\n    const match = cssColor.match(/oklch\\((\\d+\\.?\\d*)%\\s+(\\d+\\.?\\d*)\\s+(\\d+\\.?\\d*)deg\\)/);\n    if (!match) continue;\n\n    const l = parseFloat(match[1]) + adjustment;\n    const c = parseFloat(match[2]);\n    const h = parseFloat(match[3]);\n\n    const color = clampOklch({ l, c, h });\n    adjusted[shadeKey] = oklchToCss(color);\n  }\n\n  return adjusted;\n}\n","usedDeprecatedRules":[]}]
